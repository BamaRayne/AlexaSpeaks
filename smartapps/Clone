/*
 * EchoSistant - The Ultimate Voice and Text Messaging Assistant Using Your Alexa Enabled Device.
 *
 *		01/02/2017		Ver. 4 build	Smart Vents added, Garage door changed commands
 *		01/01/2017		Ver. 4 build	Bug Fix - Devices not showing in List_of_Devices in the Live Logs
 *		01/01/20017		Ver. 4 build	Ceiling Fan controls - speed up, slow down, low, medium, high
 *		12/31/2016		Ver. 4 build	Garage door support w/commands open and close, notifications in profiles
 *		12/27/2016		Rebuild			Complete makeover of the EchoSistant UI
 *
 *
 *
 *
 *  Copyright 2016 Jason Headley
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
/**********************************************************************************************************************************************/
definition(
	name			: "Clone${parent ? " - Profile" : ""}",
    namespace		: "Clone",
    author			: "JH/BD",
	description		: "The Ultimate Voice Controlled Assistant Using Alexa Enabled Devices.",
	singleInstance	: true,
    parent: parent ? "Clone.Clone" : null,
    category		: "My Apps",
	iconUrl			: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/app-Echosistant.png",
	iconX2Url		: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/app-Echosistant@2x.png",
	iconX3Url		: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/app-Echosistant@2x.png")
/**********************************************************************************************************************************************/

/************************************************************************************************************
   PARENT PAGES
************************************************************************************************************/
preferences {
    page name: "pageMain"
    //Parent Pages    
    page name: "mainParentPage"
    		page name: "mIntent"
            	page name: "mDevices"
                page name: "mFeedback"
                page name: "mDefaults"
                page name: "mSHMSec"
                page name: "customSounds"
                page name: "alerts"
            page name: "mNotifyProfile"
            page name: "mFeedbackProfile"
            page name: "mSupport"
        	page name: "mSecurity"
            page name: "mBonus"
            	page name: "mDashboard"
                	page name: "mDashConfig"
                    page name: "pageTwo"
                    page name: "mWeatherConfig"
                    page name: "severeWeatherAlertsPage"   
        	page name: "SkillDetails"
        	page name: "ProfileDetails"
            page name: "DeviceDetails"
            page name: "tokens"
            page name: "pageConfirmation"
            page name: "pageReset"
      
    //Profile Pages    
      	page name: "pCreate"
        page name: "MainProfiles"
        page name: "mainProfilePage"
    		page name: "pSend"
        	page name: "pActions"
        	page name: "pConfig"
            page name: "pRestrict"
            	page name: "certainTime"            
        	page name: "pScenes"
}
def pageMain() { if (!parent) mainParentPage() else mainProfilePage() }
/***********************************************************************************************************************
    PARENT UI CONFIGURATION
***********************************************************************************************************************/
page name: "mainParentPage"
    def mainParentPage() {	
       dynamicPage(name: "mainParentPage", title:"", install: true, uninstall:false) {
       		section ("") {
                href "mIntent", title: "Main Home Intent",  description: mIntentSettings(), state: mIntentComplete(),
                    image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/app-Echosistant%402x.png"                
				href "pCreate", title: "View and Create Profiles", description: cCreateSettings(), state: cCreateComplete(),
                    image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Config.png"    
				href "mSupport", title: "Install and Support", description: mSupportSettings(), state: mSupportComplete(),
                    image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Config.png"                               
				href "mSecurity", title: "App Information Data", description: mSecuritySettings(), state: mSecurityComplete(),
                    image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Amazon_alexa.png"                               
            	if (activateDashboard) {
                	 href "mDashboard", title: "Dashboard", description: dashboardSettings(), state: dashboardComplete(),
                     image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Config.png"
                     }
                href "mBonus", title: "                    The Current Mode is \n" +
                	"					                            ${location.currentMode} \n" +
                     
					"       Smart Home Monitor Status is: ${location.currentState("alarmSystemStatus")?.value}", description: ""
                    }
                }
			}
page name: "mIntent"
    def mIntent() {
            dynamicPage (name: "mIntent", title: "", install: false, uninstall: false) {
            section (" I want EchoSistant to... ")
			section("... use these devices") {
	            href "mDevices", title: "Select devices...", description: mDevicesSettings(), state: mDevicesComplete(),
    	        image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Config.png"
				}
//			section("... give me feedback about my home") {
//	            href "mFeedback", title: "Smart Feedback Options", description: mFeedbackSettings(), state: mFeedbackComplete(),
//                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Routines.png"
//			}                
			section ("... control my devices using these settings") {
                href "mDefaults", title: "Default control options...", description: mDefaultsSettings(), state: mDefaultsComplete(), 
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Config.png" 
    		}
            section ("...secure my home") {
            	href "mSHMSec", title: "Home Security control options...", description: mSHMSecSettings(), state: mSHMSecComplete(),
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Config.png"
            }                
            section ("This section is for Testing") {
            	href "customSounds", title: "Testing Custom Sound Notifications", description: none,
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Routines.png"
            }
     }            
}
page name: "customSounds"
	def customSounds() {
    	dynamicPage(name: "customSounds", title: "Play custom sounds", uninstall: false) {
        section ("Choose a switch") {
        	input "mySwitch", "capability.switch", title: "Choose Switches...", required: false, multiple: true, submitOnChange: true
			}
        section ("") {
        input "actionType", "enum", title: "Action?", required: true, defaultValue: "Bell 1", options: [
				"Custom Message",
				"Bell 1",
				"Bell 2",
				"Dogs Barking",
				"Fire Alarm",
				"The mail has arrived",
				"A door opened",
				"There is motion",
				"Smartthings detected a flood",
				"Smartthings detected smoke",
				"Someone is arriving",
				"Piano",
				"Lightsaber"]
			input "message","text",title:"Play this message", required:false, multiple: false
		}
		section {
			input "sonos", "capability.musicPlayer", title: "On this Speaker player", required: false
		}
	}
}
page name: "mDevices"    
        def mDevices(){
            dynamicPage(name: "mDevices", title: "",install: false, uninstall: false) {
                section ("Select devices", hideWhenEmpty: true){ }
                section ("Lights and Switches", hideWhenEmpty: true){  
                    input "cSwitch", "capability.switch", title: "Allow These Switch(es)...", multiple: true, required: false, submitOnChange: true
                    input "cVent", "capability.switchLevel", title: "Allow These Smart Vent(s)...", multiple: true, required: false
                    input "cFan", "capability.switchLevel", title: "Allow These Fan(s)...", multiple: true, required: false
                }
                section ("PIN Protected Devices (Voice Enabled Setting)" , hideWhenEmpty: true) {
                    input "cTstat", "capability.thermostat", title: "Allow These Thermostat(s)...", multiple: true, required: false, submitOnChange: true
                    	if (cTstat) {input "usePIN_T", "bool", title: "Use PIN to control Thermostats?", default: false}
                    input "cDoor", "capability.garageDoorControl", title: "Allow These Garage Door(s)...", multiple: true, required: false, submitOnChange: true
                    	if (cDoor) {input "usePIN_D", "bool", title: "Use PIN to control Doors?", default: false}  
                    input "cLock", "capability.lock", title: "Allow These Lock(s)...", multiple: true, required: false, submitOnChange: true
                    	if (cLock) {input "usePIN_L", "bool", title: "Use PIN to control Locks?", default: false}
                	input "cMiscDev", "capability.switch", title: "Allow these Misc. Switches...", multiple: true, required: false, submitOnChange: true
                    	if (cMiscDev) paragraph "All devices chosen here require PIN for all operations"
                }
                section ("Sensors", hideWhenEmpty: true) {
                 	input "cMotion", "capability.motionSensor", title: "Allow These Motion Sensor(s)...", multiple: true, required: false
                    input "cContact", "capability.contactSensor", title: "Allow These Contact Sensor(s)...", multiple: true, required: false      
                    input "cPresence", "capability.presenceSensor", title: "Allow These Presence Sensors(s)...", multiple: true, required: false
                }
                section ("Media" , hideWhenEmpty: true){
                    input "cSpeaker", "capability.musicPlayer", title: "Allow These Media Player Type Device(s)...", required: false, multiple: true
                } 
                section ("Batteries", hideWhenEmpty: true ){
                    input "cBattery", "capability.battery", title: "Allow These Device(s) with Batteries...", required: false, multiple: true
                } 
                section ("Weather Alerts") {
                    input "cWeather", "enum", title: "Choose Weather Alerts...", required: false, multiple: true, submitOnChange: true,
                    options: [
                    "TOR":	"Tornado Warning",
                    "TOW":	"Tornado Watch",
                    "WRN":	"Severe Thunderstorm Warning",
                    "SEW":	"Severe Thunderstorm Watch",
                    "WIN":	"Winter Weather Advisory",
                    "FLO":	"Flood Warning",
                    "WND":	"High Wind Advisoryt",
                    "HEA":	"Heat Advisory",
                    "FOG":	"Dense Fog Advisory",
                    "FIR":	"Fire Weather Advisory",
                    "VOL":	"Volcanic Activity Statement",
                    "HWW":	"Hurricane Wind Warning"
                    ]
                 }
            }
        }   
	page name: "mDefaults"
        def mDefaults(){
                dynamicPage(name: "mDefaults", title: "", uninstall: false){
                    section ("General Control") {            
                        input "cLevel", "number", title: "Alexa Adjusts Light Levels by using a scale of 1-10 (default is +/-3)", defaultValue: 3, required: false
                        input "cVolLevel", "number", title: "Alexa Adjusts the Volume Level by using a scale of 1-10 (default is +/-2)", defaultValue: 3, required: false
                        input "cTemperature", "number", title: "Alexa Automatically Adjusts temperature by using a scale of 1-10 (default is +/-1)", defaultValue: 1, required: false
						input "cFilterReplacement", "number", title: "Alexa Automatically Schedules HVAC Filter Replacement in this number of days (default is 90 days)", defaultValue: 1, required: false                    
                    }
                    section ("Fan Control") {            
                        input "cHigh", "number", title: "Alexa Adjusts High Level to 99% by default", defaultValue: 99, required: false
                        input "cMedium", "number", title: "Alexa Adjusts Medium Level to 66% by default", defaultValue: 66, required: false
                        input "cLow", "number", title: "Alexa Adjusts Low Level to 33% by default", defaultValue: 33, required: false
                        input "cFanLevel", "number", title: "Alexa Automatically Adjusts Ceiling Fans by using a scale of 1-100 (default is +/-33%)", defaultValue: 33, required: false
                    }
                    section ("Activity Defaults") {            
                        input "cLowBattery", "number", title: "Alexa Provides Low Battery Feddback when the Bettery Level falls below (default is 25%)", defaultValue: 25, required: false
                        input "cInactiveDev", "number", title: "Alexa Provides Inactive Device Feddback when No Activity was Detected for (default is 24 hours) ", defaultValue: 24, required: false
                     }
                     
                }
        }
page name: "mSHMSec"    
    def mSHMSec(){
        dynamicPage(name: "mSHMSec", title: "Home Security Information",install: false, uninstall: false) {
        section ("Control SHM Security Arming and Disarming") {
        	input "cSec", "capability.relaySwitch", title: "Select switch for SHM arm & disarm...", multiple: true, required: false, submitOnChange: true
		input "cPIN", "password", title: "Set PIN for ALL Home Security options", default: false, required: false	
            }
        section ("Smart Home Monitor Status Change Feedback") {
			input "fSecFeed", "bool", title: "Activate SHM status change announcements.", default: false, submitOnChange: true
			if (fSecFeed) {    
				input "shmSynthDevice", "capability.speechSynthesis", title: "On this Speech Synthesis Type Devices", multiple: true, required: false,
				image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Media.png"
				input "shmSonosDevice", "capability.musicPlayer", title: "On this Sonos Type Devices", required: false, multiple: true, submitOnChange: true,    
				image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Media.png"
				}
            if (fSecFeed) {
				input "volume", "number", title: "Temporarily change volume", description: "0-100%", required: false
				input "resumePlaying", "bool", title: "Resume currently playing music after notification", required: false, defaultValue: false
				}
           }
        section ("Other Home Security Features") {
            input "mSecSwitch", "capability.switch", title: "These switches will be PIN protected...", multiple: true, required: false, submitOnChange: true
           	if (mSecSwitch) {
            	input "uPIN_SW", "bool", title: "Activate PIN for selected switches?", default: false
                }
            }			
        }
    }                        
page name: "mNotifyProfile"    
    def mNotifyProfile() {
        dynamicPage (name: "mNotifyProfile", title: "", install: true, uninstall: false) {
        	if (childApps.size()) { 
            	section(childApps.size()==1 ? "One Room configured" : childApps.size() + " Room configured" )
            }
            if (childApps.size()) {  
            	section("Notification Profile",  uninstall: false){
                	app(name: "profile", appName: "NotificationProfile", namespace: "Clone", title: "Create a new Notifications Profile", multiple: true,  uninstall: false)
            	}
            }
            else {
            	section("Profiles",  uninstall: false){
            		paragraph "NOTE: Looks like you haven't created any Profiles yet.\n \nPlease make sure you have installed the Rooms Smart App Add-on before creating a new Room!"
            		app(name: "profile", appName: "NotificationProfile", namespace: "Clone", title: "Create a new Notifications Profile", multiple: true,  uninstall: false)
        		}
            }
       }
}
page name: "mFeedbackProfile"    
    def mFeedbackProfile() {
        dynamicPage (name: "mFeedbackProfile", title: "", install: true, uninstall: false) {
        	if (childApps.size()) { 
            	section(childApps.size()==1 ? "One Profile configured" : childApps.size() + " Profile configured" )
            }
            if (childApps.size()) {  
            	section("Feedback Profile",  uninstall: false){
                	app(name: "profile", appName: "FeedbackProfile", namespace: "Clone", title: "Create a new Feedback Profile", multiple: true,  uninstall: false)
            	}
            }
            else {
            	section("Profile",  uninstall: false){
            		paragraph "NOTE: Looks like you haven't created any Rooms yet.\n \nPlease make sure you have installed the Profile Smart App Add-on before creating a new Room!"
            		app(name: "profile", appName: "FeedbackProfile", namespace: "Clone", title: "Create a new Feedback Profile", multiple: true,  uninstall: false)
        		}
            }
       }
}
page name: "mSupport"  
 def mSupport(){
        dynamicPage(name: "mSupport", uninstall: false) {
        	section ("EchoSistant Modules") {
            	paragraph "For the notifications and room feedback to be operational, they must be installed in the ST IDE and the toggles below must be activated"
            	input "notifyOn", "bool", title: "Is the Notifications Module Installed? ", required: true, defaultValue: false
 				input "feedbackOn", "bool", title: "Is the Feedback Module Installed?", required: true, defaultValue: false
                }
                section ("Developers", hideWhenEmpty: true){  
            		paragraph ("You can reach out to the Echosistant Developers with the following information: \n" + 
                	"Jason Headley \n"+
                	"Forum user name @bamarayne \n" +
                	"Bobby Dobrescu \n"+
                	"Forum user name @SBDobrescu")
                	}
                section ("Amazon AWS Skill Details") {
					href "SkillDetails", title: "Tap to view setup data for the AWS Main Intent Skill...", description: "",
                	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/echosistant_About.png"
            		}
                section ("Directions, How-to's, and Troubleshooting") { 
 					href url:"http://thingsthataresmart.wiki/index.php?title=EchoSistant", title: "Tap to go to the EchoSistant Wiki", description: none,
                	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/app-Echosistant.png"
                	}   
            	section ("AWS Lambda website") {
            		href url:"https://aws.amazon.com/lambda/", title: "Tap to go to the AWS Lambda Website", description: none,
                	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_aws.png"
                	}
            	section ("Amazon Developer website") {    
   					href url:"https://developer.amazon.com/", title: "Tap to go to Amazon Developer website", description: none,
                	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Skills.png"
					}
                }	            	
            }
page name: "mSecurity"    
    def mSecurity(){
        dynamicPage(name: "mSecurity", title: "View Apllication Information",install: false, uninstall: true) {
                section("Debugging") {
                    input "debug", "bool", title: "Enable Debug Logging", default: false, submitOnChange: true 
                    }
                section ("Apache License"){
                    input "ShowLicense", "bool", title: "Show License", default: false, submitOnChange: true
                    def msg = textLicense()
                        if (ShowLicense) paragraph "${msg}"
                    }
                section ("Show Security Tokens") {
                	paragraph ("Log into the IDE on your computer and navigate to the Live Logs tab. Leave that window open, come back here, and open this section")
                    input "ShowTokens", "bool", title: "Show Security Tokens", default: false, submitOnChange: true
                    if (ShowTokens) paragraph "The Security Tokens are now displayed in the Live Logs section of the IDE"
    				if (ShowTokens) log.trace "STappID = '${app.id}' , STtoken = '${state.accessToken}'"
                    if (ShowTokens) paragraph 	"Access token:\n"+
                                                "${state.accessToken}\n"+
                                                "Application ID:\n"+
                                                "${app.id}"
                    }
               section ("Revoke/Renew Access Token & Application ID"){
                    href "tokens", title: "Revoke/Reset Security Access Token", description: none
                    def msg = state.accessToken != null ? state.accessToken : "Could not create Access Token. OAuth may not be enabled. "+
                    "Go to the SmartApp IDE settings to enable OAuth."	
					}
                section("Tap below to remove the ${textAppName()} application.  This will remove ALL Profiles and the App from the SmartThings mobile App."){
                }	
			}             
		}
page name: "mBonus"    
    def mBonus(){
        dynamicPage(name: "mBonus", title: "EchoSistant Bonus Features",install: false, uninstall: false) {
        section ("Home Status Dashboard") {
        	input "activateDashboard", "bool", title: "Activate the DashBoard on the Home Page", required: false, default: false, submitOnChange: true
        	}
        if (activateDashboard) {
		section ("Configure the DashBoard") {
        	href "mDashConfig", title: "Tap here to configure Dashboard", description: "", state: complete,
            image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Routines.png"
			}
        }
	}
}        
page name: "mDashboard"
	def mDashboard(){
        dynamicPage(name: "mDashboard", uninstall: false) {
        if (ActivateLocalWeather) {
        section("Today's Weather"){
        	paragraph (mGetWeather())
    		}
		}
        section ("ThermoStats and Temperature") {
        	def tStat1 = ThermoStat1
            def temp1 = (tStat1?.currentValue("temperature"))
            def setPC1 = (tStat1?.currentValue("coolingSetpoint"))
            def setPH1 = (tStat1?.currentValue("heatingSetpoint"))
            def mode1 = (tStat1?.currentValue("thermostatMode"))
            def oper1 = (tStat1?.currentValue("thermostatOperatingState"))
            def tStat2 = ThermoStat2
            def temp2 = (tStat2?.currentValue("temperature"))
            def setPC2 = (tStat2?.currentValue("coolingSetpoint"))
            def setPH2 = (tStat2?.currentValue("heatingSetpoint"))
            def mode2 = (tStat2?.currentValue("thermostatMode"))
            def oper2 = (tStat2?.currentValue("thermostatOperatingState"))
		if ("${mode1}" == "auto") 
        	paragraph "The ${tStat1} is ${temp1}°. The thermostat is in ${mode1} mode, the heat is set to ${setPH1}°, the cooling is set to ${setPC1}°, and it is currently ${oper1}."
        if ("${mode1}" == "cool")
            paragraph "The ${tStat1} is ${temp1}°. The thermostat is set to ${setPC1}°, is in ${mode1} mode and is currently ${oper1}."
        if ("${mode1}" == "heat")
            paragraph "The ${tStat1} is ${temp1}°. The thermostat is set to ${setPH1}°, is in ${mode1} mode and is currently ${oper1}."
        if ("${mode1}" == "off")
        	paragraph "The ${tStat1} thermostat is currently ${mode1}" 
		if ("${mode2}" == "auto") 
        	paragraph "The ${tStat2} is ${temp2}°. The thermostat is in ${mode2} mode, the heat is set to ${setPH2}°, the cooling is set to ${setPC2}°, and it is currently ${oper2}."
        if ("${mode2}" == "cool")
            paragraph "The ${tStat2} is ${temp2}°. The thermostat is set to ${setPC2}°, is in ${mode2} mode and is currently ${oper2}."
        if ("${mode2}" == "heat")
            paragraph "The ${tStat2} is ${temp2}°. The thermostat is set to ${setPH2}°, is in ${mode2} mode and is currently ${oper2}."
        if ("${mode2}" == "off")
        	paragraph "The ${tStat2} thermostat is currently ${mode2}" 
		}
		section ("Temperature Sensors") {
        	def Sens1temp = (tempSens1?.currentValue("temperature"))
            def Sens2temp = (tempSens2?.currentValue("temperature"))
            def Sens3temp = (tempSens3?.currentValue("temperature"))
            def Sens4temp = (tempSens4?.currentValue("temperature"))
            def Sens5temp = (tempSens5?.currentValue("temperature"))
            if (tempSens1)
            	paragraph "The temperature of the ${tempSens1} is ${Sens1temp}°."
            if (tempSens2)
            	paragraph "The temperature of the ${tempSens2} is ${Sens2temp}°."
            if (tempSens3)
            	paragraph "The temperature of the ${tempSens3} is ${Sens3temp}°."
            if (tempSens4)
            	paragraph "The temperature of the ${tempSens4} is ${Sens4temp}°."
            if (tempSens5)
            	paragraph "The temperature of the ${tempSens5} is ${Sens5temp}°."
			}
		} 
	} 
 

page name: "mDashConfig"
	def mDashConfig(){
        dynamicPage(name: "mDashConfig", uninstall: false) {
        section ("Local Weather") {
        	input "ActivateLocalWeather", "bool", title: "Display local weather conditions on Dashboard", required: false, default: false, submitOnChange: true
            }
        if (ActivateLocalWeather) {
		section ("Local Weather Information") {
            href "mWeatherConfig", title: "Tap here to configure Weather information on Dashboard", description: "", state: complete,
            image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Routines.png"
			}	
        }            
		section ("Thermoststats") {
        	input "ThermoStat1", "capability.temperatureMeasurement", title: "First ThermoStat", required: false, default: false, submitOnChange: true 
        	input "ThermoStat2", "capability.temperatureMeasurement", title: "Second ThermoStat", required: false, default: false, submitOnChange: true 
        	//input "ThermoStat3", "capability.temperatureMeasurement", title: "Other Thermostats (not displayed on Dashboard)", required: false, multiple: true 
            }
        section ("Temperature Sensors") {
        	input "tempSens1", "capability.temperatureMeasurement", title: "First Temperature Sensor", required: false, default: false, submitOnChange: true 
            input "tempSens2", "capability.temperatureMeasurement", title: "Second Temperature Sensor", required: false, default: false, submitOnChange: true 
            input "tempSens3", "capability.temperatureMeasurement", title: "Third Temperature Sensor", required: false, default: false, submitOnChange: true 
            input "tempSens4", "capability.temperatureMeasurement", title: "Fourth Temperature Sensor", required: false, default: false, submitOnChange: true 
            input "tempSens5", "capability.temperatureMeasurement", title: "Fifth Temperature Sensor", required: false, default: false, submitOnChange: true 
            //input "tempSens6", "capability.temperatureMeasurement", title: "Other Temperature Sensors (not displayed on Dashboard)", required: false, multiple: true 
        }
    }
}
def mWeatherConfig() {
	dynamicPage(name: "mWeatherConfig", title: "Weather Settings") {
		section {
    		input "wImperial", "bool", title: "Report Weather In Imperial Units\n(°F / MPH)", defaultValue: "true", required: "false"
            input "wZipCode", "text", title: "Zip Code (If Location Not Set)", required: "false"
            paragraph("Currently forecast is automatically pulled from getWeatherFeature your location must be set in your SmartThings app for this to work.")
		}
	}
}

def mGetWeather(){
	def result ="Today's weather is unavailable"
	try {
    	def weather = getWeatherFeature("forecast", settings.wZipCode)
        if(settings.wImperial){
			result = "Today's forecast is " + weather.forecast.txt_forecast.forecastday[0].fcttext  + " Tonight it will be " + weather.forecast.txt_forecast.forecastday[1].fcttext 
            }else
        	{
    		result = "Today's forecast is " + weather.forecast.txt_forecast.forecastday[0].fcttext_metric + " Tonight it will be " + weather.forecast.txt_forecast.forecastday[1].fcttext_metric
	    }
		return result
	}
	catch (Throwable t) {
		log.error t
        return result
	}
}
def WeatherAlerts(){
	def result ="Weather Alerts Active"
	def WeatherAlerts =  getWeatherFeature("alerts", settings.wZipCode)
		result = ""
        }
page name: "severeWeatherAlertsPage"    
    def severeWeatherAlertsPage(){
        dynamicPage(name: "severeWeatherAlertsPage", title: "Severe Weather Alerts",install: false, uninstall: false) {
		section ("Weather Alerts") {
        	input "WeatherAlertsToggle", "bool", title: "Activate severe weather alerts notifications", required: false, default: false, submitOnChange: true
            if (WeatherAlertsToggle) {
        	(WeatherAlerts())
            	}
        	}        
        section ("Choose which Alerts to Activate and Receive") {
		}
	}
}    
page name: "SkillDetails"
    def SkillDetails(){
            dynamicPage(name: "SkillDetails", uninstall: false) {
 			section ("List of Profiles") { 
				href "ProfileDetails", title: "View your List of Profiles for copy & paste to the AWS Skill...", description: "", state: "complete", 
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/echosistant_About.png"
            }
            section ("List of Devices") {
				href "DeviceDetails", title: "View your List of Devices for copy & paste to the AWS Skill...", description: "", state: "complete", 
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/echosistant_About.png"            	
				}
            }
        }         
page name: "ProfileDetails"
    def ProfileDetails(){
            dynamicPage(name: "ProfileDetails", uninstall: false) {
 			section ("List of Profiles") { 
                def ProfileList = getProfileDetails()   
                    paragraph ("${ProfileList}")
                      	log.info "${ProfileList} "
                        }
					}
				} 
page name: "DeviceDetails"
    def DeviceDetails(){
            dynamicPage(name: "DeviceDetails", uninstall: false) {
 			section ("List of Devices") { 
                def DeviceList = getDeviceDetails()   
                    paragraph ("${DeviceList}")
                      	log.info "${DeviceList} "
                        }
					}
                }    
page name: "tokens"
	def tokens(){
            dynamicPage(name: "tokens", title: "Security Tokens", uninstall: false){
                section(""){
                    paragraph "Tap below to Reset/Renew the Security Token. You must log in to the IDE and open the Live Logs tab before tapping here. "+
                    "Copy and paste the displayed tokens into your Amazon Lambda Code."
                    if (!state.accessToken) {
                        OAuthToken()
                        paragraph "You must enable OAuth via the IDE to setup this app"
                        }
                    }
                        def msg = state.accessToken != null ? state.accessToken : "Could not create Access Token. "+
                        "OAuth may not be enabled. Go to the SmartApp IDE settings to enable OAuth." 
                        log.trace "STappID = '${app.id}' , STtoken = '${state.accessToken}'"
                section ("Reset Access Token / Application ID"){
                    href "pageConfirmation", title: "Reset Access Token and Application ID", description: none
                    }
                }
            } 
page name: "pageConfirmation"
    def pageConfirmation(){
            dynamicPage(name: "pageConfirmation", title: "Reset/Renew Access Token Confirmation", uninstall: false){
                section {
                    href "pageReset", title: "Reset/Renew Access Token", description: "Tap here to confirm action - READ WARNING BELOW"
                    paragraph "PLEASE CONFIRM! By resetting the access token you will disable the ability to interface this SmartApp with your Amazon Echo."+
                    "You will need to copy the new access token to your Amazon Lambda code to re-enable access." +
                    "Tap below to go back to the main menu with out resetting the token. You may also tap Done above."
                    }
                section(" "){
                    href "mainParentPage", title: "Cancel And Go Back To Main Menu", description: none 
                    }
                }
            }
page name: "pageReset"
    def pageReset(){
            dynamicPage(name: "pageReset", title: "Access Token Reset", uninstall: false){
                section{
                    revokeAccessToken()
                    state.accessToken = null
                    OAuthToken()
                    def msg = state.accessToken != null ? "New access token:\n${state.accessToken}\n\n" : "Could not reset Access Token."+
                    "OAuth may not be enabled. Go to the SmartApp IDE settings to enable OAuth."
                    paragraph "${msg}"
                    paragraph "The new access token and app ID are now displayed in the Live Logs tab of the IDE."
                    log.info "STappID = '${app.id}' , STtoken = '${state.accessToken}'"
                }
                section(" "){ 
                    href "mainParentPage", title: "Tap Here To Go Back To Main Menu", description: none 
                    }
                }
            } 
/***********************************************************************************************************************
    PROFILE UI CONFIGURATION
***********************************************************************************************************************/
def pCreate() {	
    dynamicPage(name: "pCreate", title:"I want to create a...", install: true, uninstall: false) {
        section ("Control and Messaging Profile") {
			href "MainProfiles", title: "View and Create Control and Messaging Profiles...", description: pCreateSettings(), state: pCreateComplete(),
            image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_devices.png"            			
            }
     	if (notifyOn) {
        section ("Notifications Profile") {
  			href "mNotifyProfile", title: "View and Create Notification Profiles...", description: pCreateSettings(), state: pCreateComplete(),
            image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_devices.png"            			
			}
		}
        if (feedbackOn) {
        section ("FeedBack Profile") {
			href "mFeedbackProfile", title: "View and Create Feedback Profiles..", description: pCreateSettings(), state: pCreateComplete(),
            image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_devices.png"            			
			}
        }
    }   
}		
page name: "MainProfiles"
    def MainProfiles() {
            dynamicPage (name: "MainProfiles", title: "", install: false, uninstall: false) {
        	if (childApps.size()) { 
            	section(childApps.size()==1 ? "One Profile configured" : childApps.size() + " Profile configured" )
            }
            if (childApps.size()) {  
            	section("Profile",  uninstall: false){
                	app(name: "Clone", appName: "Clone", namespace: "Clone", title: "Create a new Main Profile", multiple: true,  uninstall: false)
            	}
            }
            else {
            	section("Profile",  uninstall: false){
            		paragraph "NOTE: Looks like you haven't created any Profile yet.\n \nPlease make sure you have installed the Profile Smart App Add-on before creating a new Room!"
            		app(name: "Clone", appName: "Clone", namespace: "Clone", title: "Create a new Main Room", multiple: true,  uninstall: false)
        		}
            }
		} 
    }
def mainProfilePage() {	
    dynamicPage(name: "mainProfilePage", title:"I Want This Room To...", install: true, uninstall: true, multiple: true) {
        section {
           	href "pSend", title: "Send Messages... ", description: pSendComplete(), state: pSendSettings(),
   				image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Media.png"   			
			href "pConfig", title: "Audio Message Options...", description: pConfigComplete(), state: pConfigSettings(),
            	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Extra.png"             
            href "pScenes", title: "Create Scenes... ", description: pScenesComplete(), state: pScenesSettings(),
            	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Plus.png" 
			href "pActions", title: "Execute Actions when Profile runs...", description: pActionsComplete(), state: pActionsSettings(),
            	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_devices.png"            			
            href "pRestrict", title: "With These General Profile Restrictions", description: pRestrictComplete(), state: pRestrictSettings(),
            	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Extra.png" 
		}
        section ("Name and/or Remove this Profile") {
 		   	label title:"              Rename Profile ", required:false, defaultValue: "New Control and Messaging Profile"  
        }    
	}
}
page name: "pSend"
    def pSend(){
        dynamicPage(name: "pSend", title: "", uninstall: false){
             section ("Speakers", hideWhenEmpty: true){
                input "synthDevice", "capability.speechSynthesis", title: "On this Speech Synthesis Type Devices", multiple: true, required: false,
                    image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Media.png"
                input "sonosDevice", "capability.musicPlayer", title: "On this Sonos Type Devices", required: false, multiple: true, submitOnChange: true,    
                    image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Media.png"
                if (sonosDevice) {
                    input "volume", "number", title: "Temporarily change volume", description: "0-100%", required: false
                    input "resumePlaying", "bool", title: "Resume currently playing music after notification", required: false, defaultValue: false
                }  
            }
            section ("Text Messages" ) {
            	input "sendContactText", "bool", title: "Enable Text Notifications to Contact Book (if available)", required: false, submitOnChange: true,    
                	image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Text.png" 
                if (sendContactText) input "recipients", "contact", title: "Send text notifications to (optional)", multiple: true, required: false
           			input "sendText", "bool", title: "Enable Text Notifications to non-contact book phone(s)", required: false, submitOnChange: true,      
                        image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Text.png" 
                if (sendText){      
                    paragraph "You may enter multiple phone numbers separated by comma to deliver the Alexa message as a text and a push notification. E.g. 8045551122;8046663344"
                    input name: "sms", title: "Send text notification to (optional):", type: "phone", required: false
                }
            }    
            section ("Push Messages") {
            input "push", "bool", title: "Send Push Notification (optional)", required: false, defaultValue: false,
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Text.png" 
            input "notify", "bool", title: "Send message to Mobile App Notifications Tab (optional)", required: false, defaultValue: false, submitOnChange: true,
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Text.png"
            }        
    	}                 
    } 
page name: "pActions"
    def pActions() {
            dynamicPage(name: "pActions", title: "Select Devices to use with this profile",install: false, uninstall: false) {
                 section ("Light Switches", hideWhenEmpty: true){
                    input "switches", "capability.switch", title: "Select Lights and Switches...", multiple: true, required: false, submitOnChange: true
                        if (switches) input "switchCmd", "enum", title: "What do you want to do with these switches?", options:["on":"Turn on","off":"Turn off","toggle":"Toggle","delay":"Delay"], multiple: false, required: false, submitOnChange:true
                        if (switchCmd) {
                        input "sSecondsOn", "number", title: "Turn on in Seconds?", defaultValue: none, required: false
                        input "sSecondsOff", "number", title: "Turn off in Seconds?", defaultValue: none, required: false
                        }
                        if (switchCmd) input "otherSwitch", "capability.switch", title: "...and these other switches?", multiple: true, required: false, submitOnChange: true
                        if (otherSwitch) input "otherSwitchCmd", "enum", title: "What do you want to do with these other switches?", options: ["on1":"Turn on","off1":"Turn off","toggle1":"Toggle","delay1":"Delay"], multiple: false, required: false, submitOnChange: true
                        if (otherSwitchCmd) {
                        input "sSecondsOn1", "number", title: "Turn on in Seconds?", defaultValue: none, required: false
                        input "sSecondsOff1", "number", title: "Turn off in Seconds?", defaultValue: none, required: false
                    	}
                    }
        		section ("Colored lights", hideWhenEmpty: true){
            		input "hues", "capability.colorControl", title: "Select These Colored Lights...", multiple: true, required: false, submitOnChange:true
            			if (hues) {
                        	input "hueCmd", "enum", title: "What do you want to do with these color bulbs?", options:["on":"Turn on","off":"Turn off","setColor":"Set Color"], multiple: false, required: false, submitOnChange:true
							if ("setColor") input "color", "enum", title: "Hue Color?", required: false, multiple:false, options: parent.fillColorSettings().name
							input "lightLevel", "enum", title: "Light Level?", required: false, options: [[10:"10%"],[20:"20%"],[30:"30%"],[40:"40%"],[50:"50%"],[60:"60%"],[70:"70%"],[80:"80%"],[90:"90%"],[100:"100%"]]                       
        					}
						}
                section ("Dimmers", hideWhenEmpty: true){
                    input "dimmers", "capability.switchLevel", title: "Select Dimmers...", multiple: true, required: false , submitOnChange:true
                        if (dimmers) input "dimmersCmd", "enum", title: "Command To Send To Dimmers", options:["set":"Set level","delay2":"Delay","off":"Turn off"], multiple: false, required: false, submitOnChange:true
                        if (dimmersCmd) input "dimmersLVL", "number", title: "Dimmers Level", description: "Set dimmer level", required: false, submitOnChange: true
                            if (dimmersCmd) {
                        		input "sSecondsOn2", "number", title: "Turn on in Seconds?", defaultValue: none, required: false, submitOnChange: true
                        		input "sSecondsOff2", "number", title: "Turn off in Seconds?", defaultValue: none, required: false, submitOnChange: true
                        		}	
                        if (dimmersLVL) input "otherDimmers", "capability.switchLevel", title: "Control These Other Dimmers...", multiple: true, required: false , submitOnChange:true
                        if (otherDimmers) input "otherDimmersCmd", "enum", title: "Command To Send To Other Dimmers", options:["set":"Set level","delay3":"Delay","off":"Turn off"], multiple: false, required: false, submitOnChange:true
                        if (otherDimmersCmd) input "otherDimmersLVL", "number", title: "Dimmers Level", description: "Set dimmer level", required: false, submitOnChange: true
                			if (otherDimmersCmd) {
                        		input "sSecondsOn3", "number", title: "Turn on in Seconds?", defaultValue: none, required: false, submitOnChange: true
                        		input "sSecondsOff3", "number", title: "Turn off in Seconds?", defaultValue: none, required: false, submitOnChange: true
                        		}
                    		}
                section ("Flash These Switches") {
					input "flashSwitches", "capability.switch", title: "Select Flashers", multiple: true, required: false, submitOnChange:true
					if (flashSwitches) {
					input "Fcolor", "enum", title: "Flasher Color?", required: false, multiple:false, options: ["Red","Green","Blue","Yellow","Orange","Purple","Pink"]
 					input "FlashLevel", "enum", title: "Light Flash Level?", required: false, options: [[10:"10%"],[20:"20%"],[30:"30%"],[40:"40%"],[50:"50%"],[60:"60%"],[70:"70%"],[80:"80%"],[90:"90%"],[100:"100%"]]                       
                    input "numFlashes", "number", title: "This number of times (default 3)", required: false, submitOnChange:true
                    input "onFor", "number", title: "On for (default 1 second)", required: false, submitOnChange:true
					input "offFor", "number", title: "Off for (default 1 second)", required: false, submitOnChange:true
					}
                }
			}
        }
page name: "pConfig"
    def pConfig(){
        dynamicPage(name: "pConfig", title: "Configure Global Profile Options...", uninstall: false) {
            section ("Voice Message Options and Alexa Responses") {
            input "MsgOpt", "bool", title: "I want to use these configuration options...", defaultValue: false, submitOnChange: true,
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Media.png"
                if (MsgOpt) {
					input "ShowPreMsg", "bool", title: "Pre-Message (plays on Audio Playback Device before message)", defaultValue: false, submitOnChange: true
                        if (ShowPreMsg) input "PreMsg", "text", title: "Pre-Message...", defaultValue: none, submitOnChange: true, required: false 
                    input "Acustom", "bool", title: "Custom Response from Alexa...", defaultValue: false, submitOnChange: true
                        if (Acustom) input "outputTxt", "text", title: "Input custom phrase...", required: false, defaultValue: "Message sent,   ", submitOnChange: true
                    input "Arepeat", "bool", title: "Alexa repeats message to sender when sent...", defaultValue: false, submitOnChange: true
                        if (Arepeat) {			
                        if (Arepeat && Acustom){
                            paragraph "NOTE: only one custom Alexa response can"+
                            " be delivered at once. Please only enable Custom Response OR Repeat Message"
                            }				
                        }
                    input "AfeedBack", "bool", title: "Turn on to disable Alexa Feedback Responses (silence Alexa) Overrides all other Alexa Options...", defaultValue: false, submitOnChange: true
                    input "disableTts", "bool", title: "Disable All spoken notifications (No voice output from the speakers or Alexa)", required: false, submitOnChange: true  
                    input "ContCmds", "bool", title: "Allow Alexa to prompt for additional commands after message is delivered...", defaultValue: false, submitOnChange: true
                    input "ContCmdsR", "bool", title: "Allow Alexa to prompt for additional commands after Repeat command is given...", defaultValue: false, submitOnChange: true
                    }
                }            	
	        }
    	}
page name: "pRestrict"
	def pRestrict() {
    	dynamicPage(name:"pRestrict", title: "Using these General Profile Restrictions", uninstall: false) {
        	 section ("Mode Restrictions") {
                input "modes", "mode", title: "Only when mode is", multiple: true, required: false, submitOnChange: true,
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Extra.png"
                }        
            section ("Days - Audio only on these days"){	
                input "runDay", title: "Only on certain days of the week", multiple: true, required: false, submitOnChange: true,
                    "enum", options: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
                    image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Extra.png"
                }
            section ("Time - Audio only during these times"){
                href "certainTime", title: "Only during a certain time", description: timeIntervalLabel ?: "Tap to set", state: timeIntervalLabel ? "complete" : null,
                image: "https://raw.githubusercontent.com/BamaRayne/Echosistant/master/smartapps/bamarayne/echosistant.src/Echosistant_Extra.png"
                }
			}
		}         
page name: "certainTime"
    def certainTime() {
        dynamicPage(name:"certainTime",title: "Only during a certain time", uninstall: false) {
            section("Beginning at....") {
                input "startingX", "enum", title: "Starting at...", options: ["A specific time", "Sunrise", "Sunset"], required: false , submitOnChange: true
                if(startingX in [null, "A specific time"]) input "starting", "time", title: "Start time", required: false, submitOnChange: true
                else {
                    if(startingX == "Sunrise") input "startSunriseOffset", "number", range: "*..*", title: "Offset in minutes (+/-)", required: false, submitOnChange: true
                    else if(startingX == "Sunset") input "startSunsetOffset", "number", range: "*..*", title: "Offset in minutes (+/-)", required: false, submitOnChange: true
                }
            }
            section("Ending at....") {
                input "endingX", "enum", title: "Ending at...", options: ["A specific time", "Sunrise", "Sunset"], required: false, submitOnChange: true
                if(endingX in [null, "A specific time"]) input "ending", "time", title: "End time", required: false, submitOnChange: true
                else {
                    if(endingX == "Sunrise") input "endSunriseOffset", "number", range: "*..*", title: "Offset in minutes (+/-)", required: false, submitOnChange: true
                    else if(endingX == "Sunset") input "endSunsetOffset", "number", range: "*..*", title: "Offset in minutes (+/-)", required: false, submitOnChange: true
                }
            }
        }
    }          
page name: "pScenes"    
    def pScenes() {
        dynamicPage (name: "pScenes", title: "", install: true, uninstall: false) {
        	if (childApps.size()) { 
            	section(childApps.size()==1 ? "One Scene configured" : childApps.size() + " Scenes configured" )
            }
            if (childApps.size()) {  
            	section("Scenes",  uninstall: false){
                	app(name: "scenes", appName: "Scenes", namespace: "Clone", title: "Create a new scene for this Profile", multiple: true,  uninstall: false)
            	}
            }
            else {
            	section("Scenes",  uninstall: false){
            		paragraph "NOTE: Looks like you have no Scenes yet, please make sure you have installed the Scenes Smart App Add-on before creating a new Scene!"
            		app(name: "scenes", appName: "Scenes", namespace: "Clone", title: "Create a new scene for this Profile", multiple: true,  uninstall: false)
        		}
            }
		}
	}

/*************************************************************************************************************
   CREATE INITIAL TOKEN
************************************************************************************************************/
def OAuthToken(){
	try {
		createAccessToken()
		log.debug "Creating new Access Token"
	} catch (e) {
		log.error "Access Token not defined. OAuth may not be enabled. Go to the SmartApp IDE settings to enable OAuth."
	}
}
/*************************************************************************************************************
   LAMBDA DATA MAPPING
************************************************************************************************************/
mappings {
	path("/b") { action: [GET: "processBegin"] }
	path("/c") { action: [GET: "controlDevices"] }
	path("/f") { action: [GET: "feedbackHandler"] }
    path("/p") { action: [GET: "controlProfiles"] }
    path("/r") { action: [GET: "incomingResponse"] }    
	path("/t") { action: [GET: "processTts"] }
}
/************************************************************************************************************
		Base Process
************************************************************************************************************/
def installed() {
	if (debug) log.debug "Installed with settings: ${settings}"
}
def updated() { 
	if (debug) log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}
def initialize() {
		//SHM status change
		if (fSecFeed) {
        subscribe(location, "alarmSystemStatus", alarmStatusHandler, [filterEvents:false])
        }
        // Other stuff
        sendLocationEvent(name: "echoSistant", value: "refresh", data: [profiles: getProfileList()] , isStateChange: true, descriptionText: "echoSistant Profile list refresh")
        def children = getChildApps()
    	if (debug) log.debug "Refreshing Profiles for CoRE, ${getChildApps()*.label}"
		if (!state.accessToken) {
        	if (debug) log.error "Access token not defined. Attempting to refresh. Ensure OAuth is enabled in the SmartThings IDE."
                OAuthToken()
			}
		//State Variables            
            state.lastMessage = null
            state.lastIntent  = null
            state.lastTime  = null
            state.lambdaReleaseTxt = "Not Set"
            state.lambdaReleaseDt = "Not Set" 
            state.lambdatextVersion = "Not Set"
            state.weatherAlert = "There are no weather alerts for your area"
        //Alexa Responses
			state.pTryAgain = false
        	state.pContCmds = true
            state.pMuteAlexa = false
			state.pContCmdsR        
        //PIN Settings
            state.usePIN_T = settings.uPIN_T
            state.usePIN_L = settings.uPIN_L
            state.usePIN_D = settings.uPIN_D
            state.usePin_S = settings.uPin_S
            state.usePin_M = settings.uPin_M
            state.savedPINdata = null
            state.pinTry = null
        //Other Settings
			state.changedFilters
            state.scheduledHandler
            state.filterNotif
            state.lastAction = null
	}
/************************************************************************************************************
		CoRE Integration
************************************************************************************************************/
def getProfileList(){
		return getChildApps()*.label
		if (debug) log.debug "Refreshing Profiles for CoRE, ${getChildApps()*.label}"
}
def childUninstalled() {
	if (debug) log.debug "Profile has been deleted, refreshing Profiles for CoRE, ${getChildApps()*.label}"
    sendLocationEvent(name: "echoSistant", value: "refresh", data: [profiles: getProfileList()] , isStateChange: true, descriptionText: "echoSistant Profile list refresh")
} 
/************************************************************************************************************
		Begining Process - Lambda via page b
************************************************************************************************************/
def processBegin(){
    if (debug) log.debug "^^^^____Initial Commands Received from Lambda___^^^^"  
    def versionTxt  = params.versionTxt 		
    def versionDate = params.versionDate
    def releaseTxt = params.releaseTxt
    def event = params.intentResp
        state.lambdaReleaseTxt = releaseTxt
        state.lambdaReleaseDt = versionDate
        state.lambdatextVersion = versionTxt
    def versionSTtxt = textVersion() 
    if (debug){
        log.debug "Initial data: (event) = '${event}', (ver) = '${versionTxt}', (date) = '${versionDate}', (release) = '${releaseTxt}'"+ 
        ". And sent to Lambda: pContinue = '${state.pContCmds}', versionSTtxt = '${versionSTtxt}'"
	}
    if (event == "AMAZON.NoIntent" || event == "noAction") {
    	state.pinTry = null
        state.savedPINdata = null
        state.pContCmdsR = null

    }
    if (event == "AMAZON.YesIntent" || event == "noAction") {
    	state.pContCmdsR = null
        state.lastAction = null
    }
    state.pTryAgain = false
        return ["pContinue":state.pMuteAlexa, "versionSTtxt":versionSTtxt]
}   
/***********************************************************************************************************
		SMART HOME MONITOR STATUS HANDLER
***********************************************************************************************************/
def alarmStatusHandler(evt) {
	def curEvtValue = evt.value
	log.info "Smart Home Monitor status changed to: ${curEvtValue}"
		if (shmSynthDevice || shmSonosDevice) {
			if (evt.value == "away") { 
               	if(shmSynthDevice) shmSynthDevice?.speak("Attention, The alarm system has changed status to armed '${curEvtValue}'")
            	if (shmSonosDevice) 
             	shmSonosDevice?.playTextAndRestore("Attention, The alarm system has changed status to armed '${curEvtValue}'")
            	}
                else if (evt.value == "stay") {
                	if(shmSynthDevice) shmSynthDevice?.speak("Attention, The alarm system has changed status to armed '${curEvtValue}'")
            		if (shmSonosDevice) 
             		shmSonosDevice?.playTextAndRestore("Attention, The alarm system has changed status to armed '${curEvtValue}'")
            		}
                    else if(evt.value == "off") {
                    	if(shmSynthDevice) shmSynthDevice?.speak("Attention, The alarm system has changed status to disarmed")
            			if (shmSonosDevice) 
             			shmSonosDevice?.playTextAndRestore("Attention, The alarm system has changed status to disarmed")
            			}
					}
       			}
/************************************************************************************************************
		FEEDBACK HANDLER - from Lambda via page f
************************************************************************************************************/
def feedbackHandler() {

    def fProfile = params.fProfile
    def fDevice = params.fDevice
   	def fQuery = params.fQuery
    def fOperand = params.fOperand 
    def fCommand = params.fCommand 
	def pPIN = false
    state.pTryAgain = true
    def String outputTxt = (String) null

    if (debug){
        log.debug "Feedback data: (fProfile) = '${fProfile}', (fDevice) = '${fDevice}', (fQuery) = '${fQuery}', (fOperand) = '${fOperand}', (fCommand) = '${fCommand}' "
	}


//SEARCHING EVENTS HISTORY
/*
def evtLog=[]
    def lastEvent
	 def deviceMatch = cSwitch.find {s -> s.label.toLowerCase() == fDevice.toLowerCase()}  
    def searchVal = "on"
    lastEvent= deviceMatch.events()
		lastEvent.each { if (it.value && it.value==searchVal) evtLog << [device: deviceName, time: it.date.getTime(), desc: it.descriptionText] }		
        
        log.debug "Feedback device last events:  (lastEvent) = '${lastEvent.value}', evtLog = '${evtLog}' "


    def lastNewEvt= deviceMatch.events(), eDate, eDesc, today, eventDay, voiceDay, i , evtCount = 0, result = ""
    
    for( i = 0 ; i < 10 ; i++ ) {
        eDate = lastNewEvt.date[i].getTime()
        eDesc = lastNewEvt.descriptionText[i]
    	if (eDesc) {
        	today = new Date(now()).format("EEEE, MMMM dd, yyyy", location.timeZone)
    		eventDay = new Date(eDate).format("EEEE, MMMM dd, yyyy", location.timeZone)
    		voiceDay = today == eventDay ? "Today" : "On " + eventDay
    		result += voiceDay + " at " + new Date(eDate).format("h:mm aa", location.timeZone) + " the event was: " + eDesc + ". "
   	 		evtCount ++
            if (evtCount == count) break
        }
	}
 log.debug "Feedback device last events:  (result) = '${result}'"

*/

//QUERYING FOR CURRENT STATE
def deviceMatchS = cSwitch.find {s -> s.label.toLowerCase() == fDevice.toLowerCase()} 
def	deviceMatchT = cTstat.find {t -> t.label.toLowerCase() == fDevice.toLowerCase()}
 if (debug) log.debug "Feedback device: '${result}'"
 	
    		if (deviceMatchS != null) {
			//switches
            def currSwitchState = deviceMatch.latestValue("switch")
            outputTxt = fDevice + "is currently" + currSwitchState
    		//thermostats
            }
            if (deviceMatchT != null) {
            def currentMode = deviceMatchT.latestValue("thermostatMode")
    		def currentHSP = deviceMatchT.latestValue("heatingSetpoint") 
        	def currentCSP = deviceMatchT.latestValue("coolingSetpoint") 
    		def currentTMP = deviceMatchT.latestValue("temperature") 
            def currentCycle = deviceMatchT.latestValue("thermostatOperatingState")
            //def currentDate = currentTMP.date
			outputTxt = fDevice + " is in " + currentMode + " mode, is currently " + currentCycle + " and the current temperature is " + currentTMP  + " degrees" //since " //+ currentDate
            }
     
     
     //def currentState = tempSensor.currentState("temperature")
    //log.debug "temperature value as a string: ${currentState.value}"
    //log.debug "time this temperature record was created: ${currentState.date}"

    if (fOperand == "lights") {
    
    def currSwitches = settings.cSwitch.currentSwitch
    def onSwitches = currSwitches.findAll { switchVal ->
        switchVal == fCommand ? true : false
    }
    log.debug " currSwitches: ${currSwitches}, on: ${onSwitches}"
    if (onSwitches.size() > 0) {
            log.debug "${onSwitches.size()} out of ${currSwitches.size()} switches are on"
            outputTxt = "There are " + onSwitches.size() + " out of " + currSwitches.size() + " switches that are currently on"
           return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
        }
    }
//log.debug "${onSwitches.size() out of ${switches.size()} switches are on"
/*
lastEvent.each { if (it.value && it.value==searchVal) evtLog << [device: deviceName, time: it.date.getTime(), desc: it.descriptionText] }
	} 
    if (evt.size()>0){
        evtLog.sort({it.time})
        evtLog.reverse(true)
        def today = new Date(now()).format("EEEE, MMMM d, yyyy", location.timeZone)
        def eventDay = new Date(evtLog.time[0]).format("EEEE, MMMM d, yyyy", location.timeZone)
        def voiceDay = today == eventDay ? "today" : "On " + eventDay  
        def evtTime = new Date(evtLog.time[0]).format("h:mm aa", location.timeZone)
        if (voiceEvtTimeDate && parent.getAdvEnabled()) lastEvt = "${voiceDay} at ${evtTime}. "
    }    
    return lastEvt
}

*/

    return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
}
/************************************************************************************************************
   ALEXA THINKS HANDLER 
************************************************************************************************************/
def alexaThinks() {
	def outputTxt = "Sorry, the group control module is not ready. If you believe this was not a request to control a Profile group, please open a trouble ticket. Thank you for your help, "
	def pPIN = false
    state.pTryAgain = true
    
}
/************************************************************************************************************
		PROFILE CONTROL HANDLER - from Lambda via page p
************************************************************************************************************/
def controlProfiles() {
	def outputTxt = "Sorry, the group control module is not ready. If you believe this was not a request to control a Profile group, please open a trouble ticket. Thank you for your help, "
	def pPIN = false
    state.pTryAgain = true
    return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
}

def subscribeToEvents() {
	subscribe (location.onSecurityEnable("alarmSystemStatus")?.value)
    log.info "The SHM has changed status to '${alarmSystemStatus}'"
    }


/************************************************************************************************************
   CONTROL DEVICES - from Lambda via page c
************************************************************************************************************/
def controlDevices() {
		def ctCommand = params.cCommand
        def ctNum = params.cNum
        def ctPIN = params.cPIN
        def ctDevice = params.cDevice
        def ctUnit = params.cUnit
        def ctGroup = params.cGroup       
		def pintentName = params.intentName
        def String outputTxt = (String) null 
        //this is used to activate Lambda "Try Again" response
		def pPIN = false
        def String deviceType = (String) null
        def String command = (String) null
		def String numText = (String) null
        def String result = (String) null
        def delay = false
        def data
    	state.pContCmdsR == "undefined"
        if (debug) log.debug "Received Lambda request to control devices with settings:" +
        					 " (ctCommand)= ${ctCommand}',(ctNum) = '${ctNum}', (ctPIN) = '${ctPIN}', "+
                             "(ctDevice) = '${ctDevice}', (ctUnit) = '${ctUnit}', (ctGroup) = '${ctGroup}', (pintentName) = '${pintentName}'"
  	if (pintentName == "main") {	
        if (ctNum == "undefined" || ctNum =="?") {ctNum = 0 } 
        if (ctCommand =="?") {ctCommand = "undefined"} 
			ctNum = ctNum as int
        if (ctUnit =="?" || ctUnit == "undefined") {
			def String unit =  (String) "undefined"
        }    
        else {
        	if (ctNum>0){
            	def getTxt = getUnitText(ctUnit, ctNum)     
        		numText = getTxt.text
        		ctUnit = getTxt.unit
        	}
        }   
        if (ctUnit == "flash" || ctUnit == "text" || ctUnit == "audio") {
			if (state.scheduledHandler == "filters" && state.pContCmdsR == "filters") {
            	state.filterNotif = ctUnit
                def getTxt = getUnitText(ctUnit, ctNum)  
                outputTxt = "Ok, when you need to change your filters, I will " + getTxt.text
         		return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]               
            }
        }
        if (ctNum > 0 && ctDevice != "undefined" && ctCommand == "undefined") {
            ctCommand = "set"
        }
        if (state.pinTry != null ) {
        	log.debug "Pin try is not null"
            outputTxt = pinHandler(ctPIN, ctCommand, ctNum)
        	return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
        }
        if (ctCommand != "undefined") {
        	if (ctCommand.contains ("try again")) {
                	def savedData = state.lastAction
                    outputTxt = controlHandler(savedData)
            }       
            else {
            outputTxt = getCustomCmd(ctCommand, ctUnit, ctGroup)  
        	}
            if (outputTxt!= null ) {
            		if (ctUnit == "pin number" || ctUnit == "pin") {
						if (ctGroup == "thermostats" || ctGroup == "locks" || ctGroup == "doors" || ctGroup == "security" || ctGroup == "miscDevices") {
                        	state.pTryAgain = false
                        }
                        else {
                            state.pTryAgain = true
                        }
            		}
                    if (outputTxt == "Pin number please") {pPIN = true}
            return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
			}
            else {
        		if (debug) log.debug "Fetching command and device type"           
            	def  getCMD = getCommand(ctCommand, ctUnit) 
            	deviceType = getCMD.deviceType
            	command = getCMD.command
            	if (debug) log.debug "Received command data: deviceType= '${deviceType}', command= '${command}' _____>>>>> STARTING MAIN PROCESS <<<<<< ______"
        	}
		}
        
        
        if (deviceType == "light" || deviceType == "general") {
            if (settings.cSwitch?.size() > 0 && state.pinTry == null) {
                if (debug) log.debug "Searching for a switch named '${ctDevice}'"
                def deviceMatch = cSwitch.find {s -> s.label.toLowerCase() == ctDevice.toLowerCase()}             
                if (deviceMatch) {
                    if (debug) log.debug "Found a device: '${deviceMatch}'"
                    device = deviceMatch
                    if (ctNum > 0 && ctUnit == "minutes") {
                        device = device.label
                        delay = true
                        data = [type: "cSwitch", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                        runIn(ctNum*60, controlHandler, [data: data])
                        if (command == "on" || command == "off" ) {outputTxt = "Ok, turning " + ctDevice + " " + command + ", in " + numText}
                        else if (command == "decrease") {outputTxt = "Ok, decreasing the " + ctDevice + " level in " + numText}
                        else if (command == "increase") {outputTxt = "Ok, increasing the " + ctDevice + " level in " + numText}
						return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                    }
                    else {
                        delay = false
                        data = [type: "cSwitch", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                        outputTxt = controlHandler(data)
                        if (command == "decrease" || command == "increase" ) {state.pContCmdsR = "level"}
                        if (debug) log.debug "Sending params to Lambda: pContCmds: '${state.pContCmds}', pContCmdsR: '${state.pContCmdsR}', pTryAgain: '${state.pTryAgain}' "
						return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                    }
                }
            }
        }
        else if (deviceType == "temp") {
                if (settings.cTstat?.size() > 0) {           
                    if (debug) log.debug "Searching for a thermostat named '${ctDevice}'"
                    def deviceMatch = cTstat.find {t -> t.label.toLowerCase() == ctDevice.toLowerCase()}
                    if (deviceMatch) {
 						device = deviceMatch 
                        if (debug) log.debug "Found a device: '${deviceMatch}'"        	
                        if(state.usePIN_T == true) {
            				if (debug) log.debug "PIN protected device type - '${deviceType}'"
                			delay = false
                            data = ["type": "cTstat", "command": command , "device": ctDevice, "unit": ctUnit, "num": ctNum, delay: delay]
                            state.savedPINdata = data
                			outputTxt = "Pin number please"
                			pPIN = true
                            state.pinTry = 0
                            if (debug) log.debug "PIN response pending - '${state.pinTry}'"
                			return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
            			}
                        else {                       
                            if (ctNum && ctUnit == "minutes") {
                                delay = true
                                data = [type: "cTstat", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                                runIn(ctNum*60, delayHandler, [data: data])
                                if (command == "decrease") {outputTxt = "Ok, decreasing the " + ctDevice + " temperature in " + numText}
                                else if (command == "increase") {outputTxt = "Ok, increasing the " + ctDevice + " temperature in " + numText}
                                return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                            }
                            else {
                            	delay = false
                            	data = [type: "cTstat", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            	outputTxt = controlHandler(data)
                            	return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                            }
                        }
                   }
                }
         }
        else if (deviceType == "lock") {
                if (debug) log.debug "Searching for a security switch named '${ctDevice}'"
                def deviceMatch = cLock.find {l -> l.label.toLowerCase() == ctDevice.toLowerCase()}             
                if (deviceMatch) {
                    if (debug) log.debug "Found a device: '${deviceMatch}'"
                    device = deviceMatch
					if(state.usePIN_L == true && command == "unlock") {
            			if (debug) log.debug "PIN protected device type - '${deviceType}'"               		
                        delay = false
	                    data = [type: "cLock", command: command , "device": ctDevice, "unit": ctUnit, "num": ctNum, delay: delay]
                        state.savedPINdata = data
                		outputTxt = "Pin number please"
                		pPIN = true
                        state.pinTry = 0
                        if (debug) log.debug "PIN response pending - '${state.pinTry}'"
                		return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
            			}
                    	if (ctNum > 0 && ctUnit == "minutes") {
                            device = device.label
                            delay = true
                            data = [type: "cLock", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            runIn(ctNum*60, controlHandler, [data: data])
                            if (command == "lock") {outputTxt = "Ok, locking the " + ctDevice + " system in " + numText}
                            else if (command == "unlock") {outputTxt = "Ok, unlock the " + ctDevice + " system "}
                            return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                        	}
                        else if (command == "lock" && ctNum == 0 || command == "unlock" && ctNum == 0) {
                       		delay = false
                            data = [type: "cLock", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            outputTxt = controlHandler(data)
                            return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                    		}
                        }   
                    }
        else if (deviceType == "Security") {
                if (debug) log.debug "Searching for a security switch named '${ctDevice}'"
                def deviceMatch = cSec.find {l -> l.label.toLowerCase() == ctDevice.toLowerCase()}             
                if (deviceMatch) {
                    if (debug) log.debug "Found a device: '${deviceMatch}'"
                    device = deviceMatch
					if(state.usePIN_S == true && command == "off") {
            			if (debug) log.debug "PIN protected device type - '${deviceType}'"               		
                        delay = false
	                    data = [type: "Security", command: command , "device": ctDevice, "unit": ctUnit, "num": ctNum, delay: delay]
                        state.savedPINdata = data
                		outputTxt = "Pin number please"
                		pPIN = true
                        state.pinTry = 0
                        if (debug) log.debug "PIN response pending - '${state.pinTry}'"
                		return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
            			}
                    	if (ctNum > 0 && ctUnit == "minutes") {
                            device = device.label
                            delay = true
                            data = [type: "Security", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            runIn(ctNum*60, controlHandler, [data: data])
                            if (command == "on") {outputTxt = "Ok, arming the " + ctDevice + " system in " + numText}
                            else if (command == "off") {outputTxt = "Ok, disarming the " + ctDevice + " system "}
                            return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                        	}
                        else if (command == "on" && ctNum == 0 || command == "off" && ctNum == 0) {
                       		delay = false
                            data = [type: "Security", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            outputTxt = controlHandler(data)
                            return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                    		}
                        }   
                    }
        else if (deviceType == "miscDevices") {
                if (debug) log.debug "Searching for a pin protected device named '${ctDevice}'"
                def deviceMatch = cMiscDev.find {l -> l.label.toLowerCase() == ctDevice.toLowerCase()}             
                if (deviceMatch) {
                    if (debug) log.debug "Found a device: '${deviceMatch}'"
                    device = deviceMatch
						if (debug) log.debug "PIN protected device type - '${deviceType}'"               		
                        delay = false
	                    data = [type: "cMiscDev", command: command , "device": ctDevice, "unit": ctUnit, "num": ctNum, delay: delay]
                        state.savedPINdata = data
                		outputTxt = "Pin number please"
                		pPIN = true
                        state.pinTry = 0
                        if (debug) log.debug "PIN response pending - '${state.pinTry}'"
                        if (command == "activate") {outputTxt = "Ok, activating " + ctDevice}
                        else if (command == "deactivate") {outputTxt = "Ok, deactivating" + ctDevice}
                		return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
            			}
                    	if (ctNum > 0 && ctUnit == "minutes") {
                            device = device.label
                            delay = true
                            data = [type: "cMiscDev", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            runIn(ctNum*60, controlHandler, [data: data])
                            if (command == "activate") {outputTxt = "Ok, activating the " + ctDevice + " system in " + numText}
                            else if (command == "deactivate") {outputTxt = "Ok, deactivating the " + ctDevice + " system "}
                            return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                        	}
                        else if (command == "activate" && ctNum == 0 || command == "deactivate" && ctNum == 0) {
                       		delay = false
                            data = [type: "cMiscDev", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            outputTxt = controlHandler(data)
                            return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                    	
                        }   
                    }                    
  		else if (deviceType == "volume") {      
            if (debug) log.debug "Searching for a volume control device named '${ctDevice}'"     
                if (settings.cSpeaker?.size()>0) {
                    def deviceMatch = cSpeaker.find {s -> s.label.toLowerCase() == ctDevice.toLowerCase()}
                    if (deviceMatch) {
                        if (debug) log.debug "Found a device: '${deviceMatch}'"
                        device = deviceMatch
                        delay = false
                        data = [type: "cVolume", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                        outputTxt = controlHandler(data)
						return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                    }
                }  
        }
        else if (deviceType == "fan") {
            if (settings.cFan?.size()>0) {     
                if (debug) log.debug "Searching for a fan named '${ctDevice}'"
                def deviceMatch = cFan.find {f -> f.label.toLowerCase() == ctDevice.toLowerCase()}
                if (deviceMatch) {
                    if (debug) log.debug "Found a device: '${deviceMatch}'"
                        device = deviceMatch
                        if (ctNum && ctUnit == "minutes") {
                            delay = true
                            data = [type: "cFan", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            runIn(ctNum*60, delayHandler, [data: data])
                            if (command == "decrease") {outputTxt = "Ok, decreasing the " + ctDevice + " temperature in " + numText}
                            else if (command == "increase") {outputTxt = "Ok, increasing the " + ctDevice + " temperature in " + numText}
							return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                        }
                        else {
                            delay = false
                            data = [type: "cFan", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            outputTxt = controlHandler(data)
							return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                        }
                }
            }
        }
        else if (deviceType == "door") {
            if (settings.cDoor?.size()>0) {          
                if (debug) log.debug "Searching for a door named '${ctDevice}'"
                def deviceMatch = cDoor.find {d -> d.label.toLowerCase() == ctDevice.toLowerCase()}
                if (deviceMatch) {
                    if (debug) log.debug "Found a device: '${deviceMatch}'"
                        device = deviceMatch
					if(state.usePIN_D == true) {
            			if (debug) log.debug "PIN protected device type - '${deviceType}'"
                		delay = false
	                    data = [type: "cDoor", "command": command , "device": ctDevice, "unit": ctUnit, "num": ctNum, delay: delay]
                        state.savedPINdata = data
                		outputTxt = "Pin number please"
                		pPIN = true
                        state.pinTry = 0
                        if (debug) log.debug "PIN response pending - '${state.pinTry}'"
                		return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
            		}
                    else {                 
                        if (ctNum && ctUnit == "minutes") {
                            delay = true
                            data = [type: "cDoor", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            runIn(ctNum*60, delayHandler, [data: data])
                            if (command == "open") {outputTxt = "Ok, opening " + ctDevice + " in " + numText}
                            else if (command == "close") {outputTxt = "Ok, closing " + ctDevice + " in " + numText}
							return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                        }
                        else {
                            delay = false
                            data = [type: "cDoor", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                            outputTxt = controlHandler(data)
							return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                        }
                	}
                }
                else {
                    //this is needed for Garage Doors that are set up as relays
                    if (settings.cSwitch?.size()>0) {
                    if (debug) log.debug "Searching for a relay named '${ctDevice}'"
                        deviceMatch = cSwitch.find {s -> s.label.toLowerCase() == ctDevice.toLowerCase()}             
                        if (deviceMatch) {
                            if (debug) log.debug "Found a device: '${deviceMatch}'"
                                command = "onD"
                                device = deviceMatch
                                if (ctNum > 0 && ctUnit == "minutes") {
                                    device = device.label
                                    delay = true
                                    data = [type: "cSwitch", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                                    runIn(ctNum*60, controlHandler, [data: data])
                                    if (ctCommand == "open") {outputTxt = "Ok, opening the " + ctDevice + " in " + numText}
                                    else if (command == "close") {outputTxt = "Ok, closing the " + ctDevice + " in " + numText}
								return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                                }
                                else {
                                    delay = false
                                    data = [type: "cSwitch", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                                    controlHandler(data)
                                    if (ctCommand == "open") {outputTxt = "Ok, opening the " + ctDevice}
                                    else if (ctCommand == "close") {outputTxt = "Ok, closing the " + ctDevice}
								return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                                }
                       }
                       else {
                    	//this is needed to enable open/close command for Vents group
                        if (settings.cVent?.size()>0) {
                            if (debug) log.debug "Searching for a vent named '${ctDevice}'"
                            deviceMatch = cVent.find {s -> s.label.toLowerCase() == ctDevice.toLowerCase()}             
                            if (deviceMatch) {
                                if (debug) log.debug "Found a device: '${deviceMatch}'"
                                    if (command == "open") {command = "onD"}
                                    if (command == "close") {command = "offD"}
                                    device = deviceMatch
                                    if (ctNum > 0 && ctUnit == "minutes") {
                                        device = device.label
                                        delay = true
                                        data = [type: "cSwitch", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                                        runIn(ctNum*60, controlHandler, [data: data])
                                        if (ctCommand == "open") {outputTxt = "Ok, opening the " + ctDevice + " in " + numText}
                                        else if (command == "close") {outputTxt = "Ok, closing the " + ctDevice + " in " + numText}
                                    return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                                    }
                                    else {
                                        delay = false
                                        data = [type: "cSwitch", command: command, device: device, unit: ctUnit, num: ctNum, delay: delay]
                                        controlHandler(data)
                                        if (ctCommand == "open") {outputTxt = "Ok, opening the " + ctDevice}
                                        else if (ctCommand == "close") {outputTxt = "Ok, closing the " + ctDevice}
                                    return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
                                    }
                       		}
                    	}
                    }
                }
            }
        }
      }       
      outputTxt = "I wish I could help, but EchoSistant couldn't find the device named '${ctDevice}' or the command may not be supported"
      state.pTryAgain = true
      return ["outputTxt":outputTxt, "pContCmds":state.pContCmds, "pContCmdsR":state.pContCmdsR, "pTryAgain":state.pTryAgain, "pPIN":pPIN]
   }
}
/************************************************************************************************************
	UNIT CONVERSIONS
************************************************************************************************************/ 
private getUnitText (unit, num) {     
    def String text = (String) null
    def String nUnit = (String) null
    if (unit == "minute" || unit == "minutes" || unit.contains ("minutes") || unit.contains ("minute")) {
    	nUnit = "minutes"
        text = num == 1 ? num + " minute" : num + " minutes" 
        return ["text": text, "unit": nUnit]
    } 
	if (unit == "degrees"  || unit.contains ("degrees")) {
		nUnit = "degrees"
        int tNum = num
        text = tNum + " degrees"
        return ["text":text, "unit":nUnit]
    }             
	if (unit == "percent" || unit.contains ("percent")) {
		nUnit = "percent"
		text = num + " percent" 
        return ["text":text, "unit":nUnit]
    }
    if (unit == "flash" || unit.contains ("flash")) {text = "flash your lights"}
   	if (unit == "text" || unit.contains ("text")) {text = "send you a text"}
    if (unit == "audio" || unit.contains ("audio")){text = "play a message"}
    	return ["text":text, "unit":nUnit]
}   
/************************************************************************************************************
	CUSTOM CONTROL COMMANDS
************************************************************************************************************/ 
private getCustomCmd(command, unit, group) {
    def result
	if (command == "repeat") {
		result = getLastMessageMain()
		return result
    }
	if (command == "change" || command == "changed" || command == "replace" || command == "replaced") {
		if (unit=="filters") {
        result = scheduleHandler(unit)
      	}
		return result
    }
    if (command == "cancel" || command == "stop" || command == "disable" || command == "deactivate" || command == "unschedule") {
    	if (unit == "reminder" || unit == "reminders" || unit == "timer" || unit == "timers" || unit.contains ("reminder") || unit.contains ("timer") ) {
        	if (unit.contains ("reminder")) {
            	if (state.scheduledHandler != null) {
                	def reminderHandler = state.scheduledHandler == "filters"+"Handler"
                	unschedule("${reminderHandler}")
                result = "Ok, canceling reminder for " + state.scheduledHandler
            	}
                else {
                result = "Sorry, I couldn't find any scheduled reminders"// for " + state.scheduledHandler
                }
                return result
            }
            else {
                if (unit.contains ("timer")) {
                    unschedule(controlHandler)
                    result = "Ok, canceling timer"
                    return result
                }
            }
        }
		if (unit == "conversation" || unit.contains ("conversation")) {
			state.pContCmds = false
            result = "Ok, disabling conversational features. To activate just say, start the conversation"
			return result
        }
		if (unit == "pin number" || unit == "pin") {
			if(state.usePIN_D == true || state.usePIN_T == true || state.usePIN_L == true || state.usePIN_S == true || state.usePIN_M == true) {
        		result = "Pin number please"
        		state.pinTry = 0
                state.savedPINdata = "disable" + group
        		if (debug) log.debug "PIN response pending to disable pin number - '${state.pinTry}'"
        		return result
			}
		}
         if (unit == "feedback") {
        	state.pMuteAlexa = true
            result = "Ok, disabling Alexa feedback. To activate just say, activate the feedback"
            return result
		}
    }
	if (command == "start" || command == "enable" || command == "activate" || command == "schedule") {
		if (unit == "reminder" || unit == "reminders" || unit == "timer" || unit == "timers" || unit.contains ("reminder") || unit.contains ("timer") ) {
        	state.scheduledHandler = "reminder"
            result = "Ok, reminder scheduled"
           	return result
    	}
		if (unit == "conversation" || unit.contains ("conversation")) {
           state.pContCmds = true        
           result = "Ok, activating conversational features. To disable just say, stop the conversation"
            return result
        }
		if (unit == "pin number" || unit == "pin") {
			if (group == "thermostats" || group == "locks" || group == "doors" || group == "security" || group == "miscDevices") {
            	if (group == "thermostats") {state.usePIN_T = true}
            	if (group == "locks") {state.usePIN_L = true}
            	if (group == "doors") {state.usePIN_D = true}
                if (group == "security") {state.usePIN_S = true}
                if (group == "miscDevices") {state.usePIN_M = true}
            	if (debug) log.debug "Group:'${group}' PIN: T- '${state.usePIN_T}', L-'${state.usePIN_L}', D-'${state.usePIN_D}', S-'${state.usePIN_S}', M-'${state.usePIN_M}'"
                result = "Ok, the pin has been activated for " + group + ".  To disable, just say disable the PIN for " + group
            	return result
            }
            else {
                result = "Sorry, the pin number cannot be enabled for this group "
            	return result
            }         
        }
        if (unit == "feedback") {
        	state.pMuteAlexa = false
            result = "Ok, activating Alexa feedback. To disable just say, stop the feedback"
            return result
		}
	}
} 
/************************************************************************************************************
	PIN HANDLER
************************************************************************************************************/ 
private pinHandler(pin, command, num) {
	def result
        def String pinNum = (String) null
		pinNum = num
	if (pin == cPIN || command == cPIN || pinNum == cPIN) {
		def data = state.savedPINdata
            if (data == "disablelocks" || data == "disablethermostats" || data == "disabledoors" || data == "disablesecurity" || data == "disabledevices"){ 
                if (data == "disablelocks"){state.usePIN_L = false}
                else if (data == "disablethermostats") {state.usePIN_T = false}
                else if (data == "disabledoors") {state.usePIN_D = false}  
                else if (data == "disablesecurity") {state.usePIN_S = false}
                else if (date == "disabledevices") {state.usePIN_M = false}
                result = "Ok, pin number for " + data.replace("disable", "") + " has been disabled.  To activate it again, just say enable the PIN number for " + data.replace("disable", "")   
            }
            else {
            result = controlHandler(data)
            }
            state.pinTry = null
            state.savedPINdata = null  
            return result
	}
	else {
		state.pinTry = state.pinTry + 1
			if (state.pinTry < 4){
				result = "I'm sorry, that is incorrect, "
				if (debug) log.debug "PIN NOT Matched! PIN = '${cPIN}', ctPIN= '${ctPIN}', ctNum= '${num}', ctCommand ='${command}', try# ='${state.pinTry}'"
				state.pTryAgain = true
                return result
			}
			else { 
				state.pinTry = null
                state.savedPINdata = null
				result = "I'm sorry, that is incorrect. Please check your pin number and try again later"
                return result
			}
	} 
}
/************************************************************************************************************
   DEVICE CONTROL HANDLER
************************************************************************************************************/      
def controlHandler(data) {   
    def deviceType = data.type
    def deviceCommand = data.command
   	def deviceD = data.device
    def unitU = data.unit
    def numN = data.num
    def delayD = data.delay
	def result = " "
    def actionData
    if (debug) log.debug 	"Received device control handler data: " +
        					" (deviceType)= ${deviceType}',(deviceCommand) = '${deviceCommand}', (deviceD) = '${deviceD}', " +
                            "(unitU) = '${unitU}', (numN) = '${numN}', (delayD) = '${delayD}'"  
    if (deviceType == "cSwitch") {
    	if (deviceCommand == "on" || deviceCommand == "off") {
            if (delayD == false) {
                deviceD."${deviceCommand}"()
            	def device = deviceD.label
                actionData = ["type": deviceType, "command": deviceCommand , "device": device, "unit": unitU, "num": numN, delay: delayD]
                state.lastAction = actionData
                result = "Ok, turning " + deviceD + " " + deviceCommand 
                return result
            }
            else {
            	deviceD = cSwitch.find {s -> s.label == deviceD}   
            	deviceD."${deviceCommand}"()
            }  
        }
        else if (deviceCommand == "onD") {
        		deviceD.on()
        }
        else if (deviceCommand == "offD") {
        		deviceD.off()
        }
        else if (deviceCommand == "increase" || deviceCommand == "decrease" || deviceCommand == "setLevel" || deviceCommand == "set") {
 			if (delayD == true || state.pContCmdsR == "level") {  
//               deviceD = cSwitches.find {s -> s.deviceLabel.toLowerCase() == deviceD.toLowerCase()} 
                if (debug) log.debug "Matched device control (deviceD)= ${deviceD.label}"
            }
            state.pContCmdsR == null
            def currLevel = deviceD.latestValue("level")
            def currState = deviceD.latestValue("switch")
            def newLevel = cLevel*10
            if (unitU == "percent") newLevel = numN      
            if (deviceCommand == "increase") {
            	if (unitU == "percent") {
                	newLevel = numN
                }   
                else {
                	if (currLevel == null){
                    deviceD.on()
                    result = "Ok, turning " + deviceD + " on"
            		return result    
                    }
                    else {
                	newLevel =  currLevel + newLevel
            		newLevel = newLevel < 0 ? 0 : newLevel >100 ? 100 : newLevel
            		}
                }
            }
            if (deviceCommand == "decrease") {
            	if (unitU == "percent") {
                	newLevel = numN
                }   
                else {
                	if (currLevel == null) {
                    deviceD.off()
                    result = "Ok, turning " + deviceD + " off"
            		return result                    
                    }
                    else {
                	newLevel =  currLevel - newLevel
            		newLevel = newLevel < 0 ? 0 : newLevel >100 ? 100 : newLevel
                    }
                }            
            }
            if (deviceCommand == "setLevel") {
            	if (unitU == "percent") {
                	newLevel = numN
                }   
                else {
                	newLevel =  numN*10
            		newLevel = newLevel < 0 ? 0 : newLevel >100 ? 100 : newLevel
                }            
            }
            if (newLevel > 0 && currState == "off") {
            	deviceD.on()
            	deviceD.setLevel(newLevel)
            }
            else {                                    
            	if (newLevel == 0 && currState == "on") {deviceD.off()}
                else {deviceD.setLevel(newLevel)}
            } 
            def device = deviceD.label
            actionData = ["type": deviceType, "command": deviceCommand , "device": device, "unit": unitU, "num": newLevel, delay: delayD]
            state.lastAction = actionData
            result = "Ok, setting  " + deviceD + " to " + newLevel + " percent"            
            if (delayD == false) { return result } 
    	}
	}
	else if (deviceType == "cTstat") {
 		if (delayD == true || state.pinTry != null) {  
                deviceD = cTstat.find {t -> t.label.toLowerCase() == deviceD.toLowerCase()} 
        }
        state.pinTry = null
    	def currentMode = deviceD.latestValue("thermostatMode")
    	def currentHSP = deviceD.latestValue("heatingSetpoint") 
        def currentCSP = deviceD.latestValue("coolingSetpoint") 
    	def currentTMP = deviceD.latestValue("temperature") 
    	def newSetPoint = currentTMP
		numN = numN < 60 ? 60 : numN >85 ? 85 : numN
        if (unitU == "degrees") {
    		newSetPoint = numN
            int cNewSetPoint = newSetPoint
    		if (debug) log.debug "Targeted set point is = '${newSetPoint}', current temperature is = '${currentTMP}'"
    		if (newSetPoint > currentTMP) {
    			if (currentMode == "cool" || currentMode == "off") {
    				deviceD?."heat"()
					if (debug) log.debug 	"Turning heat on because requested temperature of '${newSetPoint}' "+
                    						"is greater than current temperature of '${currentTMP}' " 
    			}
				deviceD?.setHeatingSetpoint(newSetPoint)
				if (debug) log.debug "Adjusting Heating Set Point to '${newSetPoint}' because requested temperature is greater than current temperature of '${currentTMP}'"
                result = "Ok, setting " + deviceD + " heating to " + cNewSetPoint 
                	if (debug) log.debug "delay = '${newSetPoint}'"
                    if (delayD == false) { 
                    	state.pinTry = null
                    	return result 
                    }
            }
 			else if (newSetPoint < currentTMP) {
				if (currentMode == "heat" || currentMode == "off") {
					deviceD?."cool"()
					if (debug) log.debug "Turning AC on because requested temperature of '${newSetPoint}' is less than current temperature of '${currentTMP}' "    
				}
				deviceTMatch?.setCoolingSetpoint(newSetPoint)                 
				if (debug) log.debug "Adjusting Cooling Set Point to '${newSetPoint}' because requested temperature is less than current temperature of '${currentTMP}'"
                result = "Ok, setting " + deviceD + " cooling to " + cNewSetPoint + " degrees "
                    if (delayD == false) { 
                    	return result 
                    }                       
            }
            else result = "Your room temperature is already " + cNewSetPoint + " degrees "
                    if (delayD == false) { 
                    	return result 
                    }
		}
		if (deviceCommand == "increase") {
			newSetPoint = currentTMP + cTemperature
			newSetPoint = newSetPoint < 60 ? 60 : newSetPoint >85 ? 85 : newSetPoint
            int cNewSetPoint = newSetPoint
			if (currentMode == "cool" || currentMode == "off") {
				deviceD?."heat"()
                deviceD?.setHeatingSetpoint(newSetPoint)
                if (debug) log.debug "Turning heat on because requested command asked for heat to be set to '${newSetPoint}'"
                result = "Ok, turning the heat mode on " + deviceD + " and setting heating to " + cNewSetPoint + " degrees "
                return result 
			}
			else {
				if  (currentHSP < newSetPoint) {
					deviceD?.setHeatingSetpoint(newSetPoint)
					thermostat?.poll()
					if (debug) log.debug "Adjusting Heating Set Point to '${newSetPoint}'"
                    result = "Ok, setting " + deviceD + " heating to " + cNewSetPoint + " degrees "
                        if (delayD == false) { 
                            return result 
                        }    
                }
                else {
                   	if (debug) log.debug "Not taking action because heating is already set to '${currentHSP}', which is higher than '${newSetPoint}'" 
                    result = "Your heating set point is already higher than  " + cNewSetPoint + " degrees "
                    if (delayD == false) { 
                    	return result 
                    }    
               	}  
            }
       	}
        if (deviceCommand == "decrease") {
        	newSetPoint = currentTMP - cTemperature
        	newSetPoint = newSetPoint < 60 ? 60 : newSetPoint >85 ? 85 : newSetPoint     
            int cNewSetPoint = newSetPoint
            if (currentMode == "heat" || currentMode == "off") {
        		deviceD?."cool"()
                deviceD?.setCoolingSetpoint(newSetPoint)
        		if (debug) log.debug "Turning AC on because requested command asked for cooling to be set to '${newSetPoint}'"
                result = "Ok, turning the AC mode on " + deviceD + " and setting cooling to " + cNewSetPoint + " degrees "
                return result                 
        	}   	
        	else {
        		if (currentCSP > newSetPoint) {
        			deviceD?.setCoolingSetpoint(newSetPoint)
        			thermostat?.poll()
        			if (debug) log.debug "Adjusting Cooling Set Point to '${newSetPoint}'"
        			result = "Ok, setting " + deviceD + " cooling to " + cNewSetPoint + " degrees "
                    if (delayD == false) { 
                    	return result 
                    }
                }
        		else {
        			if (debug) log.debug "Not taking action because cooling is already set to '${currentCSP}', which is lower than '${newSetPoint}'"  
                    result = "Your cooling set point is already lower than  " + cNewSetPoint + " degrees "
                    if (delayD == false) { 
                    	return result 
                    }
                } 
        	}  
        }
    }
	else if (deviceType == "cMiscDev") {
    	if (delayD == true || state.pinTry != null) {  
        	deviceD = cMiscDev.find {l -> l.label.toLowerCase() == deviceD.toLowerCase()} 
        }
        state.pinTry = null
   		deviceD?."${deviceCommand}"()
        if (deviceCommand == "activate") result = "Ok, turning on " + deviceD
        else if (deviceCommand == "deactivate") result = "Ok, turning off the  " + deviceD                    
        if (delayD == false) {return result}  
	}
	else if (deviceType == "cLock") {
    	if (delayD == true || state.pinTry != null) {  
        	deviceD = cLock.find {l -> l.label.toLowerCase() == deviceD.toLowerCase()} 
        }
        state.pinTry = null
   		deviceD."${deviceCommand}"()
        if (deviceCommand == "lock") result = "Ok, locking " + deviceD
        else if (deviceCommand == "unlock") result = "Ok, unlocking the  " + deviceD                    
        if (delayD == false) {return result}  
	}
	else if (deviceType == "Security") {
    	if (delayD == true || state.pinTry != null) {  
        	deviceD = cSec.find {l -> l.label.toLowerCase() == deviceD.toLowerCase()} 
        }
        state.pinTry = null
   		deviceD."${deviceCommand}"()
        if (deviceCommand == "on") result = "Ok, arming the " + deviceD + " system"
        else if (deviceCommand == "off") result = "Ok, disarming the " + deviceD + " system"                  
        if (delayD == false) {return result}  
	}  
 
	else if (deviceType == "cVolume" ) {
   		if (deviceCommand == "increase" || deviceCommand == "decrease" || deviceCommand == "setLevel") {
            def currLevel = deviceD.latestValue("level")
            def currState = deviceD.latestValue("switch")
            if (cVolLevel == null) {cVolLevel = 2}
            def newLevel = cVolLevel*10
			if (unitU == "percent") newLevel = numN      
            if (deviceCommand == "increase") {
            	if (unitU == "percent") {
                	newLevel = numN
                }   
                else {
                	newLevel =  currLevel + newLevel
            		newLevel = newLevel < 0 ? 0 : newLevel >100 ? 100 : newLevel
            	}
            }
            if (deviceCommand == "decrease") {
            	if (unitU == "percent") {
                	newLevel = numN
                }   
                else {
                	newLevel =  currLevel - newLevel
            		newLevel = newLevel < 0 ? 0 : newLevel >100 ? 100 : newLevel
                }            
            }
            if (deviceCommand == "setLevel") {
            	if (unitU == "percent") {
                	newLevel = numN
                }   
                else {
                	newLevel =  numN*10
            		newLevel = newLevel < 0 ? 0 : newLevel >100 ? 100 : newLevel
                }            
            }
            if (newLevel > 0 && currState == "off") {
            	deviceD.on()
            	deviceD.setLevel(newLevel)
            }
            else {                                    
            	if (newLevel == 0 && currState == "on") {deviceD.off()}
                else {deviceD.setLevel(newLevel)}
            } 
            result = "Ok, setting  " + deviceD + " volume to " + newLevel + " percent"
            return result
    	}
    	else {
        	deviceD."${deviceCommand}"()
    		result = "Ok, adjusting the volume of your " + deviceD
            return result
       }
    }
    else if (deviceType == "cDoor" || deviceType == "cVent") {
    	if (delayD == true || state.pinTry != null) {  
            	deviceD = cDoor.find {d -> d.label.toLowerCase() == deviceD.toLowerCase()}   
        }
        state.pinTry = null
   		deviceD."${deviceCommand}"()
        if (deviceCommand == "open") {result = "Ok, opening the " + deviceD}
        if (deviceCommand == "close") {result = "Ok, closing the  " + deviceD}                   
        if (delayD == false) {return result}  
	}
    else if (deviceType == "cFan") {
		if (cHigh == null) cHigh = 99
		if (cMedium == null) cMedium = 66
        if (cLow == null) cLow = 33
        if (cFanLevel == null) cFanLevel = 33
		if (delayD == true) {  
        	deviceD = cFan.find {f -> f.label == deviceD}   
        }
		def currLevel = deviceD.latestValue("level")
		def currState = deviceD.latestValue("switch")
		def newLevel = cFanLevel     
        	if (deviceCommand == "increase") {
            	newLevel =  currLevel + newLevel
            	newLevel = newLevel < 0 ? 0 : newLevel >100 ? 100 : newLevel
                deviceD.setLevel(newLevel)
                result = "Ok, increasing  " + deviceD + " to " + newLevel + " percent"
       				if (delayD == false) { return result }
            }
            else if (deviceCommand == "decrease") {
               	newLevel =  currLevel - newLevel
            	newLevel = newLevel < 0 ? 0 : newLevel >100 ? 100 : newLevel
                deviceD.setLevel(newLevel)
                result = "Ok, decreasing  " + deviceD + " to " + newLevel + " percent"
       				if (delayD == false) { return result }        
            }
            else {
                if (deviceCommand == "high") {newLevel = cHigh}
                if (deviceCommand == "medium") {newLevel = cMedium}
                if (deviceCommand == "low") {newLevel = cLow}
                    deviceD.setLevel(newLevel)
                    result = "Ok, setting  " + deviceD + " to " + newLevel + " percent"
                    if (delayD == false) {return result} 
           }           
	}
}
/***********************************************************************************************************************
    LAST MESSAGE HANDLER
***********************************************************************************************************************/
def getLastMessageMain() {
	def outputTxt = "The last message sent was," + state.lastMessage + ", and it was sent to, " + state.lastIntent + ", at, " + state.lastTime
    return  outputTxt 
  	if (debug) log.debug "Sending last message to Lambda ${outputTxt} "
}
/***********************************************************************************************************************
    SCHEDULE HANDLER
***********************************************************************************************************************/
private scheduleHandler(unit) {
    def rowDate = new Date(now())
    def cDay = rowDate.date
    def cHour= rowDate.hours
	def cMin = rowDate.minutes   
    def result
    if (debug) log.debug "Received filter replacement request, scheduler data MIN = ${cMin} , HOUR = ${cHour}, DAY = ${cDay}   "
    if (unit == "filters") {
    	if (debug) log.debug "Received filter replacement request"
        state.scheduledHandler = "filters"
        def xDays = settings.cFilterReplacement
        runOnce(new Date() + xDays , "filtersHandler")
        result = 	"Ok, I have scheduled a reminder to replace the filters in " + settings.cFilterReplacement + " days."+
        			" How would you like me to notify you when it's time to change your filters?"+
        			" You could say, text, audio or flash."
        if (debug) log.debug result
        state.pContCmdsR = "filters"
    	return result
    }
}

/***********************************************************************************************************************
    FILTERS REMINDER
***********************************************************************************************************************/
private filtersHandler() {
def text = "It's time to replace your HVAC filters" 

//NEED A SWITCH FOR THIS
if (state.filterNotif == "flash") {text = "flashing lights"}
if(state.filterNotif == "text")  {text = "sending text"}
if(state.filterNotif == "audio")  {text = "pushed audio message"}
}

/***********************************************************************************************************************
 		SKILL DETAILS
 ***********************************************************************************************************************/
private getProfileDetails() {
	def c = "" 
	def children = getChildApps()	
    	children?.each { child -> 
			c +=child.label +"\n" } 
	def ProfileDetails = "${c}" 
    	return  ProfileDetails
}
private getDeviceDetails() {
def DeviceDetails = [] 
    cSwitch.each 	{DeviceDetails << it.displayName +"\n"}
    cTstat.each 	{DeviceDetails << it.displayName +"\n"}
    cLock.each 		{DeviceDetails << it.displayName +"\n"}     
    cMotion.each 	{DeviceDetails << it.displayName +"\n"}
    cContact.each 	{DeviceDetails << it.displayName +"\n"}
    cPresence.each 	{DeviceDetails << it.displayName +"\n"}
    cDoor.each 		{DeviceDetails << it.displayName +"\n"}
    cSpeaker.each 	{DeviceDetails << it.displayName +"\n"}
    cVent.each 		{DeviceDetails << it.displayName +"\n"}
    cFan.each 		{DeviceDetails << it.displayName +"\n"}
    cMiscDev.each	{DeviceDetails << it.displayName +"\n"}
	def dUniqueList = DeviceDetails.unique (false)
    dUniqueList = dUniqueList.sort()
    def asString = dUniqueList.join("")
    return asString
}
/***********************************************************************************************************************
    COMMANDS HANDLER
***********************************************************************************************************************/
private getCommand(command, unit) {
	def deviceType = " "
		if (command) {
	//case "General Commands":
    		deviceType = "general"
        if (unit == "undefined") {
            if (command == "decrease" || command == "down") {
                command = "decrease" 
                deviceType = "general"
            }
            if (command == "increase" || command == "up") {
                command = "increase"
                deviceType = "general"
            }
            if (command == "set" || command == "set level") {
                command = "setLevel"
                deviceType = "general"
            }
        }
	//case "Temperature Commands":  
        if (command == "colder" || command =="not cold enough" || command =="too hot" || command == "too warm") {
            command = "decrease"
            deviceType = "temp"
        }     
        else if (command == "freezing" || command =="not hot enough" || command == "too chilly" || command == "too cold" || command == "warmer") {
            command = "increase"
            deviceType = "temp"
        }
        else if (unit == "degrees" || unit =="heat" || unit =="AC" || unit =="cooling" || unit =="heating") {
            if (command == "up") {
           		command = "increase"
        	}
            else if (command == "down") {
            	command = "decrease"
            }
            deviceType = "temp"
        }
        else if (unit=="degrees" || unit.contains("degrees") ||  unit.contains("heat") ||  unit.contains("AC")) {
           deviceType = "temp"    
        }       
    //case "Dimmer Commands":
        if (command == "darker" || command == "too bright" || command == "dim" || command == "dimmer") {
            command = "decrease" 
            deviceType = "light"
        }
        else if  (command == "not bright enough" || command == "brighter" || command == "too dark" || command == "brighten") {
            command = "increase" 
            deviceType = "light"     
        } 
        else if (unit == "percent") {
        	deviceType = "light"
        }
    //case "Volume Commands":
        if  (command == "mute" || command == "quiet" || command == "unmute" ) {
            deviceType = "volume" 
        }
        else if  (command == "too loud" || command == "down" ) {
            command = "decrease"
            deviceType = "volume" 
        }
        else if  (command == "not loud enough" || command == "too quiet" || command == "up") {
            command = "increase"
            deviceType = "volume"
        }
    //case "Fan Control Commands":
        if  (command == "slow down" || command == "too fast" ) {
            command = "decrease"
            deviceType = "fan" 
        }
        else if  (command == "speed up" || command == "too slow") {
            command = "increase"
            deviceType = "fan" 
        }
		else if (command == "high" || command == "medium"|| command == "low") {
			deviceType = "fan"                  
		}
    //case "Other Commands":
    	if (command == "activate" || command == "deactivate") {
        	deviceType = "miscDevices"
            if (command == "activate") {
            	command = "on"
                }
                if (command == "deactivate") {
                	command = "off"
                    }
        		}
   		if (command == "lock" || command == "unlock") {
			deviceType = "lock"                  
		}
        else if (command == "open" || command == "close") {
			deviceType = "door"                  
		}
        if (command == "arm" || command == "disarm") {
			deviceType = "Security"
            if (command == "arm") {
            command = "on"
            }
            if (command == "disarm") {
            command = "off"
            }
        }
    }
    return ["deviceType":deviceType, "command":command ]                          
}
/************************************************************************************************************
   Version/Copyright/Information/Help
************************************************************************************************************/
private def textAppName() {
	def text = app.label // Parent Name
}	
private def textVersion() {
	def text = "4.0"
}
private def textLicense() {
	def text =
	"Licensed under the Apache License, Version 2.0 (the 'License'); "+
	"you may not use this file except in compliance with the License. "+
	"You may obtain a copy of the License at"+
	" \n"+
	" http://www.apache.org/licenses/LICENSE-2.0"+
	" \n"+
	"Unless required by applicable law or agreed to in writing, software "+
	"distributed under the License is distributed on an 'AS IS' BASIS, "+
	"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. "+
	"See the License for the specific language governing permissions and "+
	"limitations under the License."
}
private textProfiles() {
def text = childApps.size()     
}
private def textHelp() {
	def text =
		"This smartapp allows you to use an Alexa device to generate a voice or text message on on a different device"
        "See our Wikilinks page for user information!"
		}
/************************************************************************************************************
   Page status and descriptions 
************************************************************************************************************/       
// MAIN PARENT PAGE
def mIntentComplete(){def result = ""
    if (mDevicesComplete() || mFeedbackComplete()) {
    	result = "complete"}
    	result}
def mIntentSettings() {def text = "Tap here to configure" 
	if (mDevicesComplete() || mFeedbackComplete()) {
    	text = "Configured"}
        else text = "Tap here to configure"
		text}
def mCreateComplete(){def result = ""
    if (cCreateComplete()) {
    	result = "Control Profiles Created"}
    	result}
def mCreateSettings() { def text = "No Profiles have been configured. Tap here to begin"
    if (cCreateComplete()) {
        text = "One profile has been configured. Tap here to view and change"}
        text}
// MAIN INTENT PAGE
def mDevicesComplete(){def result = ""
    if (cSwitch || cVent || cFan || cStat || cDoor || cLock || cMotion || cContact || cPresence || cSpeaker || cBattery || cWeather) {
    	result = "complete"	}
   		result}
def mDevicesSettings() {def text = "Tap here to configure settings" 
    if (cSwitch || cVent || cFan || cStat || cDoor || cLock || cMotion || cContact || cPresence || cSpeaker || cBattery || cWeather) {
    	text = "Configured"}
    	else text = "Tap here to choose devices"
		text}
def mFeedbackComplete(){def result = ""
    if (fShowSwitches || fShowContacts || fShowLocks || fShowMotion || fShowPresence || fShowTstat || fShowWeather || fSecFeed) {
    	result = "complete"}
    	result}
def mFeedbackSettings() {def text = ""
    if (fShowSwitches || fShowContacts || fShowLocks || fShowMotion || fShowPresence || fShowTstat || fShowWeather || fSecFeed) {
    	text = "Configured"}
    	else text = "Tap here to configure Feedback"
		text}
def mDefaultsComplete(){def result = ""
    if ("cLevel || cVolLevel || cTemperature || cFilterReplacement || cHigh || cMedium || cLow || cLowBattery || cFanLevel || cInactiveDev || cPIN") {
    	result = "complete"}
    	result}
def mDefaultsSettings() {def text = "" 
    if ("cLevel || cVolLevel || cTemperature || cFilterReplacement || cHigh || cMedium || cLow || cLowBattery || cFanLevel || cInactiveDev || cPIN") {
    	text = "Defaults are Configured"}
    	else text = "Tap here to configure Defaults"
		text}
def mSHMSecComplete(){def result = ""
    if ("fSecFeed") {
    	result = "complete"}
    	result}
def mSHMSecSettings() {def text = "" 
    if ("fSecFeed") {
    	text = "Home Security options configured"}
    	else text = "Tap here to configure Defaults"
		text}        
// VIEW AND CREATE PROFILES PAGE
def cCreateComplete(){def result = ""
    if (childApps.size()) {
    	result = "complete"}
    	result}
def cCreateSettings() {def text = "No Profiles have been configured. Tap here to begin"
    def ch = childApps.size()     
   		if (ch == 1) {text = "One Profile has been configured. Tap here to view and change"}
    	else {if (ch > 1) { text = "${ch} Profiles have been created"}}
    	text}
def pCreateComplete(){ def result = ""
    if (childApps.size()) {
    	result = "complete"}
    	result}
def pCreateSettings() { def text = "No Profiles have been configured. Tap here to begin"
    def ch = childApps.size()     
    	if (ch > 0) {text = "Profiles have been configured. Tap here to view and change"}
    	text}    
// INSTALL AND SUPPORT PAGE
def mSupportComplete(){def result = ""
    if (notifyOn || feedbackOn) {
    	result = "complete"	}
    	result}
def mSupportSettings() {def text = "Tap here to configure settings" 
    if (notifyOn || feedbackOn) {text = "Installed modules are active"}
    	else text = "There are no Activated Modules"
		text}
// SECURITY DATA PAGE
def mSecurityComplete(){def result = ""
    if (debug || ShowLicense || ShowTokens) {
    	result = "complete"}
    	result}
def mSecuritySettings() {def text = "Tap here to configure settings" 
    if (debug || ShowLicense || ShowTokens) {
    	text = "Configured - Information is now displayed in the IDE Live Logs"}
    	else text = "Configure"text	}
def dashboardSettings() { def text = "Tap here to view Dashboard" 
    	text}
def dashboardComplete(){def result = ""
    result = "complete"	}
    result
// CONTROL PROFILE
def pSendSettings(){def result = ""
    if (synthDevice || sonosDevice || sendContactText ||sendText || push || notify) {
    	result = "complete"}
   		result}
def pSendComplete() {def text = "Tap here to configure settings" 
    if (synthDevice || sonosDevice || sendContactText ||sendText || push || notify) {
    	text = "Configured"}
    	else text = "Tap to Show"
		text}
def pConfigSettings(){def result = ""
    if (ShowPreMsg || Acustom || Arepeat ||AfeedBack || ContCmds || ContCmdsR) {
    	result = "complete"}
    	result}
def pConfigComplete() {def text = "Tap here to configure settings" 
    if (ShowPreMsg || Acustom || Arepeat ||AfeedBack || ContCmds || ContCmdsR) {
    	text = "Configured"}
    	else text = "Tap to Show"
		text}
def pScenesComplete() {def text = "No Scene have been configured. Tap here to begin"
    def ch = childApps.size()     
    if (ch == 1) {text = "One Scene has been configured. Tap here to view and change"}
    else {if (ch > 1) {text = "${ch} Scenes have been created"}}
    text}
def pScenesSettings(){def result = ""
    if (childApps.size()) {
    	result = "complete"}
    	result}
def pActionsSettings(){def result = ""
    if (switches || otherSwitch || hues ||dimmers || otherDimmers || flashSwitches || newMode || runRoutine) {
    	result = "complete"}
    	result}
def pActionsComplete() {def text = "Tap here to configure settings" 
    if (switches || otherSwitch || hues ||dimmers || otherDimmers || flashSwitches || newMode || runRoutine) {text = "Configured"}
    	else text = "Tap to Show"
        text}
def pRestrictSettings(){ def result = "" 
	if (modes || runDay || hues ||startingX || endingX) {
    	result = "complete"}
        result}
def pRestrictComplete() {def text = "Tap here to configure settings" 
    if (modes || runDay || hues ||startingX || endingX) {
    	text = "Configured"}
    	else text = "Tap to Show"
        text}
